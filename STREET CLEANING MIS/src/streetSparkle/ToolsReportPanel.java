/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package streetSparkle;

import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyledDocument;

/**
 *
 * @author John Felix
 */
public class ToolsReportPanel extends javax.swing.JPanel {
    
    private final StyledDocument document = new DefaultStyledDocument(); // doc handles reports
    public Database database; // class obj
    public Reports aReport; // class obj

    /**
     * Creates new form ToolsReportPanel
     */
    public ToolsReportPanel() {
        /* variables instantiation */
        database = new Database();
        aReport = new Reports();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportsTextPane = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        printMenuItem = new javax.swing.JMenuItem();
        toolDetailsMenu = new javax.swing.JMenu();
        allToolsMenuItem = new javax.swing.JMenuItem();
        toolBorrowMenu = new javax.swing.JMenu();
        todayBorrowMenuItem = new javax.swing.JMenuItem();
        weekBorrowMenuItem = new javax.swing.JMenuItem();
        monthBorrowMenuItem = new javax.swing.JMenuItem();
        yearBorrowMenuItem = new javax.swing.JMenuItem();
        dateBorrowMenuItem = new javax.swing.JMenuItem();
        toolStatusMenu = new javax.swing.JMenu();
        damagedMenuItem = new javax.swing.JMenuItem();
        lostMenuItem = new javax.swing.JMenuItem();

        mainPanel.setBackground(new java.awt.Color(216, 235, 254));

        jInternalFrame1.setBackground(new java.awt.Color(255, 255, 255));
        jInternalFrame1.setBorder(null);
        jInternalFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jInternalFrame1.setTitle("Select from menu bar a report item");
        jInternalFrame1.setFrameIcon(null);
        jInternalFrame1.setVisible(true);

        reportsTextPane.setEditable(false);
        reportsTextPane.setBackground(new java.awt.Color(255, 255, 255));
        reportsTextPane.setDocument(document);
        reportsTextPane.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        reportsTextPane.setStyledDocument(document);
        jScrollPane2.setViewportView(reportsTextPane);

        fileMenu.setText("File  ");

        printMenuItem.setText("Print");
        fileMenu.add(printMenuItem);

        jMenuBar1.add(fileMenu);

        toolDetailsMenu.setText("Tool Details");

        allToolsMenuItem.setText("All tools details");
        allToolsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolDetailsMenuItemHandler(evt);
            }
        });
        toolDetailsMenu.add(allToolsMenuItem);

        jMenuBar1.add(toolDetailsMenu);

        toolBorrowMenu.setText("Tool Borrow");

        todayBorrowMenuItem.setText("Today");
        todayBorrowMenuItem.setToolTipText("click for tools borrowed today");
        todayBorrowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBorrowMenuItemsHandler(evt);
            }
        });
        toolBorrowMenu.add(todayBorrowMenuItem);

        weekBorrowMenuItem.setText("Week");
        weekBorrowMenuItem.setToolTipText("click for tools borrowed this week");
        weekBorrowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBorrowMenuItemsHandler(evt);
            }
        });
        toolBorrowMenu.add(weekBorrowMenuItem);

        monthBorrowMenuItem.setText("Month");
        monthBorrowMenuItem.setToolTipText("click for tools borrowed this month");
        monthBorrowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBorrowMenuItemsHandler(evt);
            }
        });
        toolBorrowMenu.add(monthBorrowMenuItem);

        yearBorrowMenuItem.setText("Year");
        yearBorrowMenuItem.setToolTipText("click for tools borrowed this year");
        yearBorrowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBorrowMenuItemsHandler(evt);
            }
        });
        toolBorrowMenu.add(yearBorrowMenuItem);

        dateBorrowMenuItem.setText("Date");
        dateBorrowMenuItem.setToolTipText("click for tools borrowed at specific date");
        dateBorrowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBorrowMenuItemsHandler(evt);
            }
        });
        toolBorrowMenu.add(dateBorrowMenuItem);

        jMenuBar1.add(toolBorrowMenu);

        toolStatusMenu.setText("Tool Status");

        damagedMenuItem.setText("Damaged tools");
        toolStatusMenu.add(damagedMenuItem);

        lostMenuItem.setText("Lost tools");
        toolStatusMenu.add(lostMenuItem);

        jMenuBar1.add(toolStatusMenu);

        jInternalFrame1.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void toolDetailsMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolDetailsMenuItemHandler
        // check if menu item clicked
        if(evt.getSource() == allToolsMenuItem) {
            // load tool details into JTextPane
            aReport.generateToolDetailsReport(document, reportsTextPane);
        }
    }//GEN-LAST:event_toolDetailsMenuItemHandler

    private void toolBorrowMenuItemsHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBorrowMenuItemsHandler
        // check if menu item clicked
        if(evt.getSource() == todayBorrowMenuItem) {
            try {
                // load borrow details into JTextPane
                aReport.generateToolBorrowDetailsReport(document,reportsTextPane,database.fetchToolsBorrowedDay.executeQuery(),
                        "TOOLS BORROWED TODAY REPORT","null", false);
            } 
            catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );        
            }
        }
        
        // check if menu item clicked
        if(evt.getSource() == weekBorrowMenuItem) {
            try {
                // load borrow details into JTextPane
                aReport.generateToolBorrowDetailsReport(document,reportsTextPane,database.fetchToolsBorrowedWeek.executeQuery(),
                        "TOOLS BORROWED THIS WEEK REPORT","null", false);
            } 
            catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );        
            }
        }
        
        // check if menu item clicked
        if(evt.getSource() == monthBorrowMenuItem) {
            try {
                // load borrow details into JTextPane
                aReport.generateToolBorrowDetailsReport(document,reportsTextPane,database.fetchToolsBorrowedMonth.executeQuery(),
                        "TOOLS BORROWED THIS MONTH REPORT","null", false);
            } 
            catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );        
            }
        }
        
        // check if menu item clicked
        if(evt.getSource() == yearBorrowMenuItem) {
            try {
                // load borrow details into JTextPane
                aReport.generateToolBorrowDetailsReport(document,reportsTextPane,database.fetchToolsBorrowedYear.executeQuery(),
                        "TOOLS BORROWED THIS YEAR REPORT","null", false);
            } 
            catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );        
            }
        }
        
        // check if menu item clicked
        if(evt.getSource() == dateBorrowMenuItem) {
            try {
                // get search date value from user
                String dateInput = JOptionPane.showInputDialog(null, "Input the search date. Format: YYYY-MM-DD\neg. 2022-05-05", "Street Sparkle- Input the search date", JOptionPane.QUESTION_MESSAGE);
                // validate the input date
                if(dateInput == null || dateInput.equals("")) {
                    // do nothing
                } else if(Authenticator.validateDate(dateInput) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Date!\neg.2022-05-03", "Street Sparkle- Search borrow date", JOptionPane.WARNING_MESSAGE );
                } else {
                    // load borrow details into JTextPane
                    aReport.generateToolBorrowDetailsReport(document,reportsTextPane,database.fetchToolsBorrowedDay.executeQuery(),
                            "TOOLS BORROWED ON THE DATE " + dateInput,dateInput, true);
                }
            } 
            catch(SQLException exception) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );        
            }
            catch(IllegalArgumentException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Date!", "Street Sparkle- Search borrow date", JOptionPane.WARNING_MESSAGE );
            }
            catch(NullPointerException e) {
                // do nothing
            }           
        }
    }//GEN-LAST:event_toolBorrowMenuItemsHandler


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem allToolsMenuItem;
    private javax.swing.JMenuItem damagedMenuItem;
    private javax.swing.JMenuItem dateBorrowMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem lostMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem monthBorrowMenuItem;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JTextPane reportsTextPane;
    private javax.swing.JMenuItem todayBorrowMenuItem;
    private javax.swing.JMenu toolBorrowMenu;
    private javax.swing.JMenu toolDetailsMenu;
    private javax.swing.JMenu toolStatusMenu;
    private javax.swing.JMenuItem weekBorrowMenuItem;
    private javax.swing.JMenuItem yearBorrowMenuItem;
    // End of variables declaration//GEN-END:variables
}
