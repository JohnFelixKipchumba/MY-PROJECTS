/*
 * @author John Felix 
 *
 */
package myPharma;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyledDocument;

public class AdminUI extends javax.swing.JFrame {

    /**
     * Creates new form AdminUI
     */
    public DB database; // class DB object declaration to handle database services
    public PharmaDetails pharmaDetails; // class PharmaDetails object to handle setting/details
    public boolean success = false; // flag sets success message    
    protected static StyledDocument document = new DefaultStyledDocument(); // doc handles reports
    
    public AdminUI() {
        database = new DB();
        pharmaDetails = new PharmaDetails();
        // call class PharmaDetails functions to set interface details
        pharmaDetails.fetchCompanyDetails();
        pharmaDetails.fetchMonetaryDetails();
        // general interface components initialization
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu12 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        jMenu15 = new javax.swing.JMenu();
        jMenu16 = new javax.swing.JMenu();
        jMenu17 = new javax.swing.JMenu();
        jMenu18 = new javax.swing.JMenu();
        jMenu19 = new javax.swing.JMenu();
        jMenu20 = new javax.swing.JMenu();
        framePanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        titleL = new javax.swing.JLabel();
        footerPanel = new javax.swing.JPanel();
        footerL = new javax.swing.JLabel();
        adminTabbedPane = new javax.swing.JTabbedPane();
        addItemTabPanel = new javax.swing.JPanel();
        fillStockPanel = new javax.swing.JPanel();
        drugNameL = new javax.swing.JLabel();
        drugNameTF = new javax.swing.JTextField();
        instructionL1 = new javax.swing.JLabel();
        measurementL = new javax.swing.JLabel();
        batchL = new javax.swing.JLabel();
        expiryL = new javax.swing.JLabel();
        quantityL = new javax.swing.JLabel();
        buyPriceL = new javax.swing.JLabel();
        sellPriceL = new javax.swing.JLabel();
        batchTF = new javax.swing.JTextField();
        quantityTF = new javax.swing.JTextField();
        measurementCB = new javax.swing.JComboBox<>();
        clearStockJB = new javax.swing.JButton();
        addStockJB = new javax.swing.JButton();
        buyPriceFormattedTF = new javax.swing.JFormattedTextField();
        sellPriceFormattedTF = new javax.swing.JFormattedTextField();
        measurementFormattedTF = new javax.swing.JFormattedTextField();
        expiryTF = new javax.swing.JTextField();
        addItemPanel = new javax.swing.JPanel();
        instructionL2 = new javax.swing.JLabel();
        drugNameL2 = new javax.swing.JLabel();
        measurementL2 = new javax.swing.JLabel();
        drugTypeL = new javax.swing.JLabel();
        drugPrescriptionL = new javax.swing.JLabel();
        drugNameTF2 = new javax.swing.JTextField();
        drugPrescriptionTF = new javax.swing.JTextField();
        measurementCB2 = new javax.swing.JComboBox<>();
        drugTypeCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        drugDescriptionTA = new javax.swing.JTextArea();
        addItemJB = new javax.swing.JButton();
        clearItemsJB = new javax.swing.JButton();
        measurementFormattedTF2 = new javax.swing.JFormattedTextField();
        manageStaffTabPanel = new javax.swing.JPanel();
        addStaffPanel = new javax.swing.JPanel();
        instructionL3 = new javax.swing.JLabel();
        staffNameL = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        staffIdL = new javax.swing.JLabel();
        staffDobL = new javax.swing.JLabel();
        staffPhoneL = new javax.swing.JLabel();
        staffEmailL = new javax.swing.JLabel();
        staffEmailTF = new javax.swing.JTextField();
        staffPhoneTF = new javax.swing.JTextField();
        fNameTF = new javax.swing.JTextField();
        staffIdTF = new javax.swing.JTextField();
        mNameTF = new javax.swing.JTextField();
        lNameTF = new javax.swing.JTextField();
        fNameL = new javax.swing.JLabel();
        mNameL = new javax.swing.JLabel();
        lNameL = new javax.swing.JLabel();
        staffGenderL = new javax.swing.JLabel();
        staffGenderCB = new javax.swing.JComboBox<>();
        staffSalaryL = new javax.swing.JLabel();
        staffPerksL = new javax.swing.JLabel();
        staffSalaryFormattedTF = new javax.swing.JFormattedTextField();
        staffPerksFormattedTF = new javax.swing.JFormattedTextField();
        staffUsernameL = new javax.swing.JLabel();
        staffPasswordL = new javax.swing.JLabel();
        staffUsernameTF = new javax.swing.JTextField();
        staffPasswordPF = new javax.swing.JPasswordField();
        staffTitleL = new javax.swing.JLabel();
        staffTitleCB = new javax.swing.JComboBox<>();
        submitStaffJB = new javax.swing.JButton();
        clearStaffJB = new javax.swing.JButton();
        staffDobTF = new javax.swing.JTextField();
        updateStaffPanel = new javax.swing.JPanel();
        updateStaffL = new javax.swing.JLabel();
        updateStaffTF = new javax.swing.JTextField();
        updateUsernameCheckBox = new javax.swing.JCheckBox();
        updatePasswordCheckBox = new javax.swing.JCheckBox();
        updatePhoneCheckBox = new javax.swing.JCheckBox();
        updateEmailCheckBox = new javax.swing.JCheckBox();
        updateUsernameTF = new javax.swing.JTextField();
        updatePasswordPF = new javax.swing.JPasswordField();
        updatePhoneTF = new javax.swing.JTextField();
        updateEmailTF = new javax.swing.JTextField();
        updateTitleCheckBox = new javax.swing.JCheckBox();
        updatePerksCheckBox = new javax.swing.JCheckBox();
        updateSalaryCheckBox = new javax.swing.JCheckBox();
        updateTitleCB = new javax.swing.JComboBox<>();
        updateSalaryFormattedTF = new javax.swing.JFormattedTextField();
        updatePerksFormattedTF = new javax.swing.JFormattedTextField();
        updateStaffJB = new javax.swing.JButton();
        clearStaffDetailsJB = new javax.swing.JButton();
        terminateStaffPanel = new javax.swing.JPanel();
        instructionL4 = new javax.swing.JLabel();
        terminateStaffL = new javax.swing.JLabel();
        terminateStaffTF = new javax.swing.JTextField();
        terminateStaffJB = new javax.swing.JButton();
        clearTerminateStaffJB = new javax.swing.JButton();
        terminateInstructionL = new javax.swing.JLabel();
        reportsTabPanel = new javax.swing.JPanel();
        reportsJInternalFrame = new javax.swing.JInternalFrame();
        reportsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportsTextPane = new javax.swing.JTextPane();
        reportsMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        printMenuItem = new javax.swing.JMenuItem();
        salesJMenu = new javax.swing.JMenu();
        salesTodayMenuItem = new javax.swing.JMenuItem();
        salesWeekMenuItem = new javax.swing.JMenuItem();
        salesMonthMenuItem = new javax.swing.JMenuItem();
        salesYearMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        salesDateMenuItem = new javax.swing.JMenuItem();
        expiringJMenu = new javax.swing.JMenu();
        expiringTodayMenuItem = new javax.swing.JMenuItem();
        expiringWeekMenuItem = new javax.swing.JMenuItem();
        expiringMonthMenuItem = new javax.swing.JMenuItem();
        expiringYearMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        expiringDateMenuItem = new javax.swing.JMenuItem();
        availableJMenu = new javax.swing.JMenu();
        availableMenuItem = new javax.swing.JMenuItem();
        staffJMenu = new javax.swing.JMenu();
        allStaffMenuItem = new javax.swing.JMenuItem();
        specificStaffMenuItem = new javax.swing.JMenuItem();
        customerJMenu = new javax.swing.JMenu();
        customerTodayMenuItem = new javax.swing.JMenuItem();
        customerWeekMenuItem = new javax.swing.JMenuItem();
        customerMonthMenuItem = new javax.swing.JMenuItem();
        customerYearMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        customerDateMenuItem = new javax.swing.JMenuItem();
        settingsTabPanel = new javax.swing.JPanel();
        settingsInstructionL = new javax.swing.JLabel();
        companyDetailsPanel = new javax.swing.JPanel();
        nameCheckBox = new javax.swing.JCheckBox();
        missionCheckBox = new javax.swing.JCheckBox();
        enterpriseMissionTF = new javax.swing.JTextField();
        phoneCheckBox = new javax.swing.JCheckBox();
        enterprisePhoneTF = new javax.swing.JTextField();
        emailCheckBox = new javax.swing.JCheckBox();
        enterpriseEmailTF = new javax.swing.JTextField();
        addressCheckBox = new javax.swing.JCheckBox();
        enterpriseAddressTF = new javax.swing.JTextField();
        locationCheckBox = new javax.swing.JCheckBox();
        enterpriseLocationTF = new javax.swing.JTextField();
        websiteCheckBox = new javax.swing.JCheckBox();
        enterpriseWebsiteTF = new javax.swing.JTextField();
        cancelEnterpriseDetailsJB = new javax.swing.JButton();
        applyEnterpriseDetailsJB = new javax.swing.JButton();
        enterpriseNameTF = new javax.swing.JTextField();
        paymentDetailsPanel = new javax.swing.JPanel();
        mobilePayCheckBox = new javax.swing.JCheckBox();
        servicePaymentTF = new javax.swing.JTextField();
        typePaymentTF = new javax.swing.JTextField();
        accountPaymentTF = new javax.swing.JTextField();
        servicePaymentL = new javax.swing.JLabel();
        typePaymentL = new javax.swing.JLabel();
        accountPaymentL = new javax.swing.JLabel();
        bankPaymentL = new javax.swing.JLabel();
        accountBankPaymentL = new javax.swing.JLabel();
        bankPaymentTF = new javax.swing.JTextField();
        accountBankPaymentTF = new javax.swing.JTextField();
        bankPayCheckBox = new javax.swing.JCheckBox();
        cardPayCheckBox = new javax.swing.JCheckBox();
        applyPayMethodJB = new javax.swing.JButton();
        cancelPayMethodJB = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cardPaymentList = new javax.swing.JList<>();
        financialDetailsPanel = new javax.swing.JPanel();
        statutoryCheckBox = new javax.swing.JCheckBox();
        rentCheckBox = new javax.swing.JCheckBox();
        pettyCheckBox = new javax.swing.JCheckBox();
        electricityCheckBox = new javax.swing.JCheckBox();
        waterCheckBox = new javax.swing.JCheckBox();
        applyExpenseJB = new javax.swing.JButton();
        cancelExpenseJB = new javax.swing.JButton();
        statutoryBillFormattedTF = new javax.swing.JFormattedTextField();
        rentBillFormattedTF = new javax.swing.JFormattedTextField();
        pettyBillFormattedTF = new javax.swing.JFormattedTextField();
        electricityBillFormattedTF = new javax.swing.JFormattedTextField();
        waterBillFormattedTF = new javax.swing.JFormattedTextField();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenu6.setText("jMenu6");

        jMenuItem1.setText("jMenuItem1");

        jMenu8.setText("jMenu8");

        jMenu9.setText("jMenu9");

        jMenu10.setText("jMenu10");

        jMenu12.setText("jMenu12");

        jMenu13.setText("jMenu13");

        jMenu14.setText("jMenu14");

        jMenu15.setText("jMenu15");

        jMenu16.setText("jMenu16");

        jMenu17.setText("jMenu17");

        jMenu18.setText("jMenu18");

        jMenu19.setText("jMenu19");

        jMenu20.setText("jMenu20");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin - MyPHARMA");
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(6);
        setMinimumSize(new java.awt.Dimension(1350, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingHandler(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                windowOpenedHandler(evt);
            }
        });

        framePanel.setBackground(new java.awt.Color(255, 255, 255));
        framePanel.setMaximumSize(new java.awt.Dimension(1366, 749));
        framePanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        framePanel.setPreferredSize(new java.awt.Dimension(1366, 749));

        headerPanel.setBackground(new java.awt.Color(204, 255, 255));

        titleL.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        titleL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleL.setLabelFor(headerPanel);
        titleL.setText("enterprise title here...");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(titleL, javax.swing.GroupLayout.PREFERRED_SIZE, 1048, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleL, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                .addContainerGap())
        );

        footerPanel.setBackground(new java.awt.Color(204, 255, 255));

        footerL.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        footerL.setForeground(new java.awt.Color(255, 0, 0));
        footerL.setLabelFor(footerPanel);
        footerL.setText("motto/mission statement here...");

        javax.swing.GroupLayout footerPanelLayout = new javax.swing.GroupLayout(footerPanel);
        footerPanel.setLayout(footerPanelLayout);
        footerPanelLayout.setHorizontalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(footerL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        footerPanelLayout.setVerticalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerPanelLayout.createSequentialGroup()
                .addComponent(footerL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        adminTabbedPane.setBackground(new java.awt.Color(249, 251, 253));
        adminTabbedPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 133, 24), new java.awt.Color(255, 133, 24), java.awt.Color.orange, java.awt.Color.orange));

        addItemTabPanel.setBackground(new java.awt.Color(249, 251, 253));

        fillStockPanel.setBackground(new java.awt.Color(249, 251, 253));
        fillStockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fill Stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        drugNameL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugNameL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drugNameL.setLabelFor(drugNameTF);
        drugNameL.setText("Drug Name");

        drugNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        instructionL1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        instructionL1.setForeground(new java.awt.Color(255, 0, 0));
        instructionL1.setText("Fill in all the Fields!");

        measurementL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        measurementL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        measurementL.setLabelFor(measurementFormattedTF);
        measurementL.setText("Drug Measurement");

        batchL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        batchL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        batchL.setLabelFor(batchTF);
        batchL.setText("Batch No");

        expiryL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        expiryL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expiryL.setLabelFor(expiryTF);
        expiryL.setText("Drug Expiry");

        quantityL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quantityL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        quantityL.setLabelFor(quantityTF);
        quantityL.setText("Buy Quantity");

        buyPriceL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buyPriceL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        buyPriceL.setLabelFor(buyPriceFormattedTF);
        buyPriceL.setText("Unit Buy Price");

        sellPriceL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sellPriceL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sellPriceL.setLabelFor(sellPriceFormattedTF);
        sellPriceL.setText("Unit Sell Price");

        batchTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        quantityTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quantityTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        measurementCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        measurementCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "g", "mg", "Micrograms", "Nanograms", "L", "ml", "mmol (millimols)", "Ratio", "% w/w", "% w/v", "% v/v" }));
        measurementCB.setToolTipText("select measurement");

        clearStockJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearStockJB.setText("Clear");
        clearStockJB.setToolTipText("click to reset all fields");
        clearStockJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStockJBHandler(evt);
            }
        });

        addStockJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addStockJB.setText("Add Stock");
        addStockJB.setToolTipText("click to add purchased stock");
        addStockJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockJBHandler(evt);
            }
        });

        buyPriceFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        buyPriceFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        buyPriceFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        sellPriceFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        sellPriceFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sellPriceFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        measurementFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        measurementFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        measurementFormattedTF.setToolTipText("input value and select measurement");
        measurementFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        expiryTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        expiryTF.setText("YYYY-MM-DD");
        expiryTF.setToolTipText("");

        javax.swing.GroupLayout fillStockPanelLayout = new javax.swing.GroupLayout(fillStockPanel);
        fillStockPanel.setLayout(fillStockPanelLayout);
        fillStockPanelLayout.setHorizontalGroup(
            fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillStockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sellPriceL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buyPriceL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantityL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(expiryL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(batchL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(measurementL, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(instructionL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drugNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(fillStockPanelLayout.createSequentialGroup()
                        .addComponent(addStockJB, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(clearStockJB, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(drugNameTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(batchTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fillStockPanelLayout.createSequentialGroup()
                        .addComponent(measurementFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(measurementCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(quantityTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sellPriceFormattedTF)
                    .addComponent(expiryTF)
                    .addGroup(fillStockPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(buyPriceFormattedTF)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        fillStockPanelLayout.setVerticalGroup(
            fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillStockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionL1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(drugNameTF)
                    .addComponent(drugNameL, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fillStockPanelLayout.createSequentialGroup()
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(measurementL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(measurementCB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(batchTF)
                            .addComponent(batchL, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                    .addComponent(measurementFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fillStockPanelLayout.createSequentialGroup()
                        .addComponent(expiryL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantityL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyPriceL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buyPriceFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sellPriceFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sellPriceL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)
                        .addGroup(fillStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearStockJB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addStockJB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(expiryTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        addItemPanel.setBackground(new java.awt.Color(249, 251, 253));
        addItemPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add New Item", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        instructionL2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        instructionL2.setForeground(new java.awt.Color(255, 0, 0));
        instructionL2.setText("Fill in all the Fields!");

        drugNameL2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugNameL2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drugNameL2.setLabelFor(drugNameTF2);
        drugNameL2.setText("Drug Name");

        measurementL2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        measurementL2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        measurementL2.setLabelFor(measurementFormattedTF2);
        measurementL2.setText("Drug Measurement");

        drugTypeL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugTypeL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drugTypeL.setLabelFor(drugTypeCB);
        drugTypeL.setText("Drug Type");

        drugPrescriptionL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugPrescriptionL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drugPrescriptionL.setLabelFor(drugPrescriptionTF);
        drugPrescriptionL.setText("Drug Prescription");

        drugNameTF2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        drugPrescriptionTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugPrescriptionTF.setText("1 X 1");

        measurementCB2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        measurementCB2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "g", "mg", "Micrograms", "Nanograms", "L", "ml", "mmol (millimols)", "Ratio", "% w/w", "% w/v", "% v/v" }));
        measurementCB2.setToolTipText("select measurement");

        drugTypeCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GENERIC", "BRANDED" }));

        drugDescriptionTA.setColumns(20);
        drugDescriptionTA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drugDescriptionTA.setLineWrap(true);
        drugDescriptionTA.setRows(3);
        drugDescriptionTA.setToolTipText("write drug description");
        drugDescriptionTA.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Fill Drug Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jScrollPane1.setViewportView(drugDescriptionTA);

        addItemJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addItemJB.setText("Add Item");
        addItemJB.setToolTipText("click to record new item");
        addItemJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemJBHandler(evt);
            }
        });

        clearItemsJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearItemsJB.setText("Clear");
        clearItemsJB.setToolTipText("click to reset all fields");
        clearItemsJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearItemsJBHandler(evt);
            }
        });

        measurementFormattedTF2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        measurementFormattedTF2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        measurementFormattedTF2.setToolTipText("input value and select measurement");
        measurementFormattedTF2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout addItemPanelLayout = new javax.swing.GroupLayout(addItemPanel);
        addItemPanel.setLayout(addItemPanelLayout);
        addItemPanelLayout.setHorizontalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(instructionL2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drugNameL2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(measurementL2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(drugTypeL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drugPrescriptionL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(drugNameTF2)
                    .addComponent(drugPrescriptionTF)
                    .addGroup(addItemPanelLayout.createSequentialGroup()
                        .addComponent(addItemJB, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(clearItemsJB, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addItemPanelLayout.createSequentialGroup()
                        .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(measurementFormattedTF2)
                            .addComponent(drugTypeCB, 0, 150, Short.MAX_VALUE))
                        .addGap(8, 8, 8)
                        .addComponent(measurementCB2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        addItemPanelLayout.setVerticalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionL2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(drugNameTF2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(drugNameL2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addItemPanelLayout.createSequentialGroup()
                        .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(measurementL2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(measurementCB2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drugTypeL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(drugTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(drugPrescriptionTF, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(drugPrescriptionL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addItemJB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearItemsJB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(measurementFormattedTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addItemTabPanelLayout = new javax.swing.GroupLayout(addItemTabPanel);
        addItemTabPanel.setLayout(addItemTabPanelLayout);
        addItemTabPanelLayout.setHorizontalGroup(
            addItemTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fillStockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addItemTabPanelLayout.setVerticalGroup(
            addItemTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fillStockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        adminTabbedPane.addTab("MANAGE ITEMS  ", null, addItemTabPanel, "click to record new item");

        manageStaffTabPanel.setBackground(new java.awt.Color(249, 251, 253));

        addStaffPanel.setBackground(new java.awt.Color(249, 251, 253));
        addStaffPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add New Staff", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        instructionL3.setForeground(new java.awt.Color(255, 0, 0));
        instructionL3.setText("Fill in all the Fields!");

        staffNameL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffNameL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffNameL.setLabelFor(fNameTF);
        staffNameL.setText("Staff Name");

        staffIdL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffIdL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffIdL.setLabelFor(staffIdTF);
        staffIdL.setText("Staff ID");

        staffDobL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffDobL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffDobL.setLabelFor(staffDobTF);
        staffDobL.setText("Staff Date of Birth");

        staffPhoneL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffPhoneL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffPhoneL.setLabelFor(staffPhoneTF);
        staffPhoneL.setText("Staff Mobile Phone");

        staffEmailL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffEmailL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffEmailL.setLabelFor(staffEmailTF);
        staffEmailL.setText("Staff Email");

        staffEmailTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        staffPhoneTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffPhoneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        fNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                alphabeticKeyTypedHandler(evt);
            }
        });

        staffIdTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffIdTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        mNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        mNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                alphabeticKeyTypedHandler(evt);
            }
        });

        lNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                alphabeticKeyTypedHandler(evt);
            }
        });

        fNameL.setText("First");
        fNameL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        mNameL.setText("Middle");
        mNameL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lNameL.setText("Last");
        lNameL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        staffGenderL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffGenderL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffGenderL.setLabelFor(staffGenderCB);
        staffGenderL.setText("Gender");

        staffGenderCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffGenderCB.setMaximumRowCount(2);
        staffGenderCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));

        staffSalaryL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffSalaryL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffSalaryL.setLabelFor(staffSalaryFormattedTF);
        staffSalaryL.setText("Staff Salary");

        staffPerksL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffPerksL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffPerksL.setLabelFor(staffPerksFormattedTF);
        staffPerksL.setText("Staff Perks");

        staffSalaryFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        staffSalaryFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        staffSalaryFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffSalaryFormattedTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        staffPerksFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        staffPerksFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        staffPerksFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffPerksFormattedTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        staffUsernameL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffUsernameL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffUsernameL.setLabelFor(staffUsernameTF);
        staffUsernameL.setText("Staff Username");

        staffPasswordL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffPasswordL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffPasswordL.setLabelFor(staffPasswordPF);
        staffPasswordL.setText("Staff Password");

        staffUsernameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        staffPasswordPF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        staffTitleL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        staffTitleL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        staffTitleL.setLabelFor(staffTitleCB);
        staffTitleL.setText("Staff Title");

        staffTitleCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffTitleCB.setMaximumRowCount(2);
        staffTitleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "STAFF", "MANAGER" }));

        submitStaffJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        submitStaffJB.setText("Submit");
        submitStaffJB.setToolTipText("click to submit staff details");
        submitStaffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitStaffJBHandler(evt);
            }
        });

        clearStaffJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearStaffJB.setText("Clear");
        clearStaffJB.setToolTipText("click to reset all fields");
        clearStaffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStaffJBHandler(evt);
            }
        });

        staffDobTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffDobTF.setText("YYYY-MM-DD");

        javax.swing.GroupLayout addStaffPanelLayout = new javax.swing.GroupLayout(addStaffPanel);
        addStaffPanel.setLayout(addStaffPanelLayout);
        addStaffPanelLayout.setHorizontalGroup(
            addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStaffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instructionL3, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(staffEmailL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffDobL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffIdL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffNameL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffPhoneL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(staffEmailTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addStaffPanelLayout.createSequentialGroup()
                                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(staffPhoneTF, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fNameL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                        .addComponent(staffIdTF, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fNameTF, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(staffDobTF, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mNameTF)
                                    .addComponent(mNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(staffGenderL, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lNameTF)
                            .addComponent(lNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffGenderCB, 0, 135, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addStaffPanelLayout.createSequentialGroup()
                                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(staffTitleL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(staffSalaryL, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(staffPerksL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(staffTitleCB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(staffSalaryFormattedTF)
                                            .addComponent(staffPerksFormattedTF, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(staffUsernameL, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                            .addComponent(staffPasswordL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(clearStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                            .addComponent(staffUsernameTF)
                                            .addComponent(staffPasswordPF, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))))
                            .addComponent(submitStaffJB, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addStaffPanelLayout.setVerticalGroup(
            addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStaffPanelLayout.createSequentialGroup()
                .addComponent(instructionL3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(staffUsernameTF)
                    .addComponent(staffUsernameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staffSalaryFormattedTF)
                    .addComponent(staffSalaryL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fNameL, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(mNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lNameTF)
                            .addComponent(staffNameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fNameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(mNameTF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffIdL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staffIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(staffPasswordPF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffPasswordL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(staffPerksL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(staffPerksFormattedTF, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffTitleL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(addStaffPanelLayout.createSequentialGroup()
                                .addComponent(staffTitleCB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                        .addComponent(staffDobL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addStaffPanelLayout.createSequentialGroup()
                        .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(staffGenderCB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffGenderL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addGroup(addStaffPanelLayout.createSequentialGroup()
                        .addComponent(staffDobTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(staffPhoneTF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(staffPhoneL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clearStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(staffEmailTF)
                    .addComponent(staffEmailL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        updateStaffPanel.setBackground(new java.awt.Color(249, 251, 253));
        updateStaffPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Update Staff Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        updateStaffPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        updateStaffL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateStaffL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        updateStaffL.setLabelFor(updateStaffTF);
        updateStaffL.setText("Input the Staff National ID");

        updateStaffTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateStaffTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        updateUsernameCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateUsernameCheckBox.setText("Username");
        updateUsernameCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updatePasswordCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updatePasswordCheckBox.setText("Password");
        updatePasswordCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updatePhoneCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updatePhoneCheckBox.setText("Mobile Phone");
        updatePhoneCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updateEmailCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateEmailCheckBox.setText("Email");
        updateEmailCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updateUsernameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateUsernameTF.setEnabled(false);

        updatePasswordPF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updatePasswordPF.setEnabled(false);

        updatePhoneTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updatePhoneTF.setEnabled(false);
        updatePhoneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        updateEmailTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateEmailTF.setEnabled(false);

        updateTitleCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateTitleCheckBox.setText("Staff Title");
        updateTitleCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updatePerksCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updatePerksCheckBox.setText("Perks");
        updatePerksCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updateSalaryCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateSalaryCheckBox.setText("Salary");
        updateSalaryCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStaffDetailsCheckBoxesHandler(evt);
            }
        });

        updateTitleCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateTitleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "STAFF", "MANAGER" }));
        updateTitleCB.setEnabled(false);

        updateSalaryFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        updateSalaryFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        updateSalaryFormattedTF.setEnabled(false);
        updateSalaryFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updatePerksFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        updatePerksFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        updatePerksFormattedTF.setEnabled(false);
        updatePerksFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updateStaffJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateStaffJB.setText("Update");
        updateStaffJB.setToolTipText("click to record changes");
        updateStaffJB.setEnabled(false);
        updateStaffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStaffJBHandler(evt);
            }
        });

        clearStaffDetailsJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearStaffDetailsJB.setText("Clear");
        clearStaffDetailsJB.setToolTipText("click to reset fields");
        clearStaffDetailsJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStaffDetailsJBHandler(evt);
            }
        });

        javax.swing.GroupLayout updateStaffPanelLayout = new javax.swing.GroupLayout(updateStaffPanel);
        updateStaffPanel.setLayout(updateStaffPanelLayout);
        updateStaffPanelLayout.setHorizontalGroup(
            updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateStaffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateStaffPanelLayout.createSequentialGroup()
                        .addComponent(updateStaffL, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateStaffTF, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(updateStaffPanelLayout.createSequentialGroup()
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(updateEmailCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updatePhoneCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(updatePasswordCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateUsernameCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(updateUsernameTF)
                            .addComponent(updatePasswordPF)
                            .addComponent(updatePhoneTF)
                            .addComponent(updateEmailTF))
                        .addGap(67, 67, 67)
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateTitleCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(updatePerksCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateSalaryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateTitleCB, 0, 180, Short.MAX_VALUE)
                            .addComponent(updateSalaryFormattedTF)
                            .addComponent(updatePerksFormattedTF)
                            .addComponent(clearStaffDetailsJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        updateStaffPanelLayout.setVerticalGroup(
            updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateStaffPanelLayout.createSequentialGroup()
                .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(updateStaffPanelLayout.createSequentialGroup()
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateStaffL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateStaffTF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateUsernameCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateUsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(updateTitleCB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateTitleCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updatePasswordCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatePasswordPF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateSalaryFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateSalaryCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateStaffPanelLayout.createSequentialGroup()
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updatePhoneCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(updatePhoneTF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(updatePerksCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(7, 7, 7)
                        .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateEmailCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateEmailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(updatePerksFormattedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(updateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(clearStaffDetailsJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        terminateStaffPanel.setBackground(new java.awt.Color(249, 251, 253));
        terminateStaffPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Terminate Staff", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        instructionL4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        instructionL4.setForeground(new java.awt.Color(255, 0, 0));
        instructionL4.setText("Input the Staff National ID");

        terminateStaffL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        terminateStaffL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        terminateStaffL.setText("Staff ID");

        terminateStaffTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        terminateStaffTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        terminateStaffJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        terminateStaffJB.setText("Terminate");
        terminateStaffJB.setToolTipText("click to record terminated staff");
        terminateStaffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateStaffJBHandler(evt);
            }
        });

        clearTerminateStaffJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearTerminateStaffJB.setText("Clear");
        clearTerminateStaffJB.setToolTipText("click to reset field");
        clearTerminateStaffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTerminateStaffJBHandler(evt);
            }
        });

        terminateInstructionL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        terminateInstructionL.setText("Note! Once terminated, the staff can't access the system.");

        javax.swing.GroupLayout terminateStaffPanelLayout = new javax.swing.GroupLayout(terminateStaffPanel);
        terminateStaffPanel.setLayout(terminateStaffPanelLayout);
        terminateStaffPanelLayout.setHorizontalGroup(
            terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                .addGroup(terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(terminateStaffJB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearTerminateStaffJB, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(terminateInstructionL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instructionL4, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                                .addComponent(terminateStaffL, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(terminateStaffTF, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(54, 54, 54))
        );
        terminateStaffPanelLayout.setVerticalGroup(
            terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(terminateStaffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionL4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(terminateStaffL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(terminateStaffTF, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(terminateStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(terminateStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(clearTerminateStaffJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(terminateInstructionL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout manageStaffTabPanelLayout = new javax.swing.GroupLayout(manageStaffTabPanel);
        manageStaffTabPanel.setLayout(manageStaffTabPanelLayout);
        manageStaffTabPanelLayout.setHorizontalGroup(
            manageStaffTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageStaffTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageStaffTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addStaffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(manageStaffTabPanelLayout.createSequentialGroup()
                        .addComponent(updateStaffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(terminateStaffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        manageStaffTabPanelLayout.setVerticalGroup(
            manageStaffTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageStaffTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addStaffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageStaffTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateStaffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(terminateStaffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        adminTabbedPane.addTab("MANAGE STAFF  ", null, manageStaffTabPanel, "click to add staff");

        reportsTabPanel.setBackground(new java.awt.Color(249, 251, 253));

        reportsJInternalFrame.setBackground(new java.awt.Color(255, 255, 255));
        reportsJInternalFrame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        reportsJInternalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        reportsJInternalFrame.setTitle("Select menu for specific report");
        reportsJInternalFrame.setFrameIcon(null);
        reportsJInternalFrame.setVisible(true);

        reportsPanel.setBackground(new java.awt.Color(249, 251, 253));

        reportsTextPane.setEditable(false);
        reportsTextPane.setDocument(document);
        reportsTextPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        reportsTextPane.setStyledDocument(document);
        jScrollPane3.setViewportView(reportsTextPane);

        javax.swing.GroupLayout reportsPanelLayout = new javax.swing.GroupLayout(reportsPanel);
        reportsPanel.setLayout(reportsPanelLayout);
        reportsPanelLayout.setHorizontalGroup(
            reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1324, Short.MAX_VALUE)
                .addContainerGap())
        );
        reportsPanelLayout.setVerticalGroup(
            reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileJMenu.setText("File");

        saveMenuItem.setText("Save");
        fileJMenu.add(saveMenuItem);

        printMenuItem.setText("Print");
        fileJMenu.add(printMenuItem);

        reportsMenuBar.add(fileJMenu);

        salesJMenu.setText("Sales Details");

        salesTodayMenuItem.setText("Today");
        salesTodayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesDetailsMenuItemHandler(evt);
            }
        });
        salesJMenu.add(salesTodayMenuItem);

        salesWeekMenuItem.setText("Week");
        salesWeekMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesDetailsMenuItemHandler(evt);
            }
        });
        salesJMenu.add(salesWeekMenuItem);

        salesMonthMenuItem.setText("Month");
        salesMonthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesDetailsMenuItemHandler(evt);
            }
        });
        salesJMenu.add(salesMonthMenuItem);

        salesYearMenuItem.setText("Year");
        salesYearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesDetailsMenuItemHandler(evt);
            }
        });
        salesJMenu.add(salesYearMenuItem);
        salesJMenu.add(jSeparator3);

        salesDateMenuItem.setText("Date");
        salesDateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesDetailsMenuItemHandler(evt);
            }
        });
        salesJMenu.add(salesDateMenuItem);

        reportsMenuBar.add(salesJMenu);

        expiringJMenu.setText("Expiring Items");

        expiringTodayMenuItem.setText("Today");
        expiringTodayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsExpiringMenuItemHandler(evt);
            }
        });
        expiringJMenu.add(expiringTodayMenuItem);

        expiringWeekMenuItem.setText("Week");
        expiringWeekMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsExpiringMenuItemHandler(evt);
            }
        });
        expiringJMenu.add(expiringWeekMenuItem);

        expiringMonthMenuItem.setText("Month");
        expiringMonthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsExpiringMenuItemHandler(evt);
            }
        });
        expiringJMenu.add(expiringMonthMenuItem);

        expiringYearMenuItem.setText("Year");
        expiringYearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsExpiringMenuItemHandler(evt);
            }
        });
        expiringJMenu.add(expiringYearMenuItem);
        expiringJMenu.add(jSeparator2);

        expiringDateMenuItem.setText("Date");
        expiringDateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsExpiringMenuItemHandler(evt);
            }
        });
        expiringJMenu.add(expiringDateMenuItem);

        reportsMenuBar.add(expiringJMenu);

        availableJMenu.setText("Available Items");

        availableMenuItem.setText("All Recorded Items");
        availableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableItemsMenuItemHandler(evt);
            }
        });
        availableJMenu.add(availableMenuItem);

        reportsMenuBar.add(availableJMenu);

        staffJMenu.setText("Staff Details");

        allStaffMenuItem.setText("All Staff");
        allStaffMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffMenuItemHandler(evt);
            }
        });
        staffJMenu.add(allStaffMenuItem);

        specificStaffMenuItem.setText("Specific Staff");
        specificStaffMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffMenuItemHandler(evt);
            }
        });
        staffJMenu.add(specificStaffMenuItem);

        reportsMenuBar.add(staffJMenu);

        customerJMenu.setText("Customer Details");

        customerTodayMenuItem.setText("Today");
        customerTodayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDetailsMenuItemHandler(evt);
            }
        });
        customerJMenu.add(customerTodayMenuItem);

        customerWeekMenuItem.setText("Week");
        customerWeekMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDetailsMenuItemHandler(evt);
            }
        });
        customerJMenu.add(customerWeekMenuItem);

        customerMonthMenuItem.setText("Month");
        customerMonthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDetailsMenuItemHandler(evt);
            }
        });
        customerJMenu.add(customerMonthMenuItem);

        customerYearMenuItem.setText("Year");
        customerYearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDetailsMenuItemHandler(evt);
            }
        });
        customerJMenu.add(customerYearMenuItem);
        customerJMenu.add(jSeparator1);

        customerDateMenuItem.setText("Date");
        customerDateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDetailsMenuItemHandler(evt);
            }
        });
        customerJMenu.add(customerDateMenuItem);

        reportsMenuBar.add(customerJMenu);

        reportsJInternalFrame.setJMenuBar(reportsMenuBar);

        javax.swing.GroupLayout reportsJInternalFrameLayout = new javax.swing.GroupLayout(reportsJInternalFrame.getContentPane());
        reportsJInternalFrame.getContentPane().setLayout(reportsJInternalFrameLayout);
        reportsJInternalFrameLayout.setHorizontalGroup(
            reportsJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        reportsJInternalFrameLayout.setVerticalGroup(
            reportsJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout reportsTabPanelLayout = new javax.swing.GroupLayout(reportsTabPanel);
        reportsTabPanel.setLayout(reportsTabPanelLayout);
        reportsTabPanelLayout.setHorizontalGroup(
            reportsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportsJInternalFrame)
        );
        reportsTabPanelLayout.setVerticalGroup(
            reportsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportsJInternalFrame)
        );

        adminTabbedPane.addTab("REPORTS     ", null, reportsTabPanel, "click to view reports");

        settingsTabPanel.setBackground(new java.awt.Color(249, 251, 253));

        settingsInstructionL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        settingsInstructionL.setForeground(new java.awt.Color(255, 0, 0));
        settingsInstructionL.setText("Select checkbox for setting you want to modify.");

        companyDetailsPanel.setBackground(new java.awt.Color(249, 251, 253));
        companyDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Enterprise Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        nameCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameCheckBox.setText("Enterprise Name");
        nameCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        missionCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        missionCheckBox.setText("Motto/Vision");
        missionCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterpriseMissionTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseMissionTF.setEnabled(false);

        phoneCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        phoneCheckBox.setText("Mobile Phone");
        phoneCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterprisePhoneTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterprisePhoneTF.setEnabled(false);
        enterprisePhoneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        emailCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        emailCheckBox.setText("Email");
        emailCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterpriseEmailTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseEmailTF.setEnabled(false);

        addressCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addressCheckBox.setText("Address");
        addressCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterpriseAddressTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseAddressTF.setEnabled(false);

        locationCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        locationCheckBox.setText("Location");
        locationCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterpriseLocationTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseLocationTF.setEnabled(false);

        websiteCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        websiteCheckBox.setText("Website");
        websiteCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enterpriseDetailsCheckBoxesHandler(evt);
            }
        });

        enterpriseWebsiteTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseWebsiteTF.setEnabled(false);

        cancelEnterpriseDetailsJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelEnterpriseDetailsJB.setText("Cancel");
        cancelEnterpriseDetailsJB.setToolTipText("click to cancel changes");
        cancelEnterpriseDetailsJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelEnterpriseDetailsJBHandler(evt);
            }
        });

        applyEnterpriseDetailsJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        applyEnterpriseDetailsJB.setText("Apply");
        applyEnterpriseDetailsJB.setToolTipText("click to apply changes");
        applyEnterpriseDetailsJB.setEnabled(false);
        applyEnterpriseDetailsJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyEnterpriseDetailsJBHandler(evt);
            }
        });

        enterpriseNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterpriseNameTF.setEnabled(false);

        javax.swing.GroupLayout companyDetailsPanelLayout = new javax.swing.GroupLayout(companyDetailsPanel);
        companyDetailsPanel.setLayout(companyDetailsPanelLayout);
        companyDetailsPanelLayout.setHorizontalGroup(
            companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(companyDetailsPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(companyDetailsPanelLayout.createSequentialGroup()
                        .addComponent(applyEnterpriseDetailsJB, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(cancelEnterpriseDetailsJB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(companyDetailsPanelLayout.createSequentialGroup()
                        .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(websiteCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(locationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addressCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phoneCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(missionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enterpriseMissionTF)
                            .addComponent(enterprisePhoneTF)
                            .addComponent(enterpriseEmailTF)
                            .addComponent(enterpriseAddressTF)
                            .addComponent(enterpriseLocationTF)
                            .addComponent(enterpriseWebsiteTF, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(enterpriseNameTF))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        companyDetailsPanelLayout.setVerticalGroup(
            companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(companyDetailsPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseNameTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(missionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseMissionTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(phoneCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterprisePhoneTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseEmailTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addressCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseAddressTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseLocationTF))
                .addGap(18, 18, 18)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(websiteCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(enterpriseWebsiteTF))
                .addGap(39, 39, 39)
                .addGroup(companyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelEnterpriseDetailsJB, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(applyEnterpriseDetailsJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        paymentDetailsPanel.setBackground(new java.awt.Color(249, 251, 253));
        paymentDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Payment Options Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        mobilePayCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mobilePayCheckBox.setText("Mobile Payment");
        mobilePayCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentOptionsCheckBoxesHandler(evt);
            }
        });

        servicePaymentTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        servicePaymentTF.setText("eg. Mpesa");
        servicePaymentTF.setEnabled(false);

        typePaymentTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        typePaymentTF.setText("eg. TILL NO");
        typePaymentTF.setEnabled(false);

        accountPaymentTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accountPaymentTF.setText("eg. 1023965");
        accountPaymentTF.setEnabled(false);
        accountPaymentTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        servicePaymentL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        servicePaymentL.setLabelFor(servicePaymentTF);
        servicePaymentL.setText("Service");

        typePaymentL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        typePaymentL.setLabelFor(typePaymentTF);
        typePaymentL.setText("Type");

        accountPaymentL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        accountPaymentL.setLabelFor(accountPaymentTF);
        accountPaymentL.setText("Account");

        bankPaymentL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bankPaymentL.setLabelFor(bankPaymentTF);
        bankPaymentL.setText("Bank Name");

        accountBankPaymentL.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        accountBankPaymentL.setLabelFor(accountBankPaymentTF);
        accountBankPaymentL.setText("Account");

        bankPaymentTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bankPaymentTF.setEnabled(false);

        accountBankPaymentTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accountBankPaymentTF.setEnabled(false);
        accountBankPaymentTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numericKeyTypedHandler(evt);
            }
        });

        bankPayCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bankPayCheckBox.setText("Bank Payment");
        bankPayCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentOptionsCheckBoxesHandler(evt);
            }
        });

        cardPayCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cardPayCheckBox.setText("Card Payment");
        cardPayCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentOptionsCheckBoxesHandler(evt);
            }
        });

        applyPayMethodJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        applyPayMethodJB.setText("Apply");
        applyPayMethodJB.setToolTipText("click to apply changes");
        applyPayMethodJB.setEnabled(false);
        applyPayMethodJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyPayMethodJBHandler(evt);
            }
        });

        cancelPayMethodJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelPayMethodJB.setText("Cancel");
        cancelPayMethodJB.setToolTipText("click to cancel changes");
        cancelPayMethodJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPayMethodJBHandler(evt);
            }
        });

        cardPaymentList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cardPaymentList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "VISA", "MASTERCARD", "AMERICAN EXPRESS" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        cardPaymentList.setToolTipText("select accepted card(s)");
        cardPaymentList.setEnabled(false);
        cardPaymentList.setPreferredSize(new java.awt.Dimension(130, 45));
        cardPaymentList.setVisibleRowCount(3);
        jScrollPane2.setViewportView(cardPaymentList);

        javax.swing.GroupLayout paymentDetailsPanelLayout = new javax.swing.GroupLayout(paymentDetailsPanel);
        paymentDetailsPanel.setLayout(paymentDetailsPanelLayout);
        paymentDetailsPanelLayout.setHorizontalGroup(
            paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentDetailsPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cardPayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mobilePayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(bankPayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(applyPayMethodJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(bankPaymentTF)
                    .addComponent(bankPaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(servicePaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(servicePaymentTF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(paymentDetailsPanelLayout.createSequentialGroup()
                            .addComponent(typePaymentL, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(accountPaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(paymentDetailsPanelLayout.createSequentialGroup()
                            .addComponent(typePaymentTF, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cancelPayMethodJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(accountPaymentTF, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))))
                    .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(accountBankPaymentTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(accountBankPaymentL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        paymentDetailsPanelLayout.setVerticalGroup(
            paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(servicePaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(typePaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(accountPaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mobilePayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(servicePaymentTF)
                    .addComponent(typePaymentTF)
                    .addComponent(accountPaymentTF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bankPaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(accountBankPaymentL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bankPayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(bankPaymentTF)
                    .addComponent(accountBankPaymentTF))
                .addGap(18, 18, 18)
                .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardPayCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paymentDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(paymentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(applyPayMethodJB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelPayMethodJB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        financialDetailsPanel.setBackground(new java.awt.Color(249, 251, 253));
        financialDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Recurrent Expenses Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        statutoryCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        statutoryCheckBox.setText("Statutory Fees");
        statutoryCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recurrentExpensesCheckBoxesHandler(evt);
            }
        });

        rentCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rentCheckBox.setText("Rent Bill");
        rentCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recurrentExpensesCheckBoxesHandler(evt);
            }
        });

        pettyCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pettyCheckBox.setText("Petty Expenses");
        pettyCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recurrentExpensesCheckBoxesHandler(evt);
            }
        });

        electricityCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        electricityCheckBox.setText("Electricity Bill");
        electricityCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recurrentExpensesCheckBoxesHandler(evt);
            }
        });

        waterCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        waterCheckBox.setText("Water Bill");
        waterCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recurrentExpensesCheckBoxesHandler(evt);
            }
        });

        applyExpenseJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        applyExpenseJB.setText("Apply");
        applyExpenseJB.setToolTipText("click to apply changes");
        applyExpenseJB.setEnabled(false);
        applyExpenseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyExpenseJBHandler(evt);
            }
        });

        cancelExpenseJB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelExpenseJB.setText("Cancel");
        cancelExpenseJB.setToolTipText("click to cancel changes");
        cancelExpenseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelExpenseJBHandler(evt);
            }
        });

        statutoryBillFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        statutoryBillFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        statutoryBillFormattedTF.setEnabled(false);
        statutoryBillFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rentBillFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        rentBillFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rentBillFormattedTF.setEnabled(false);
        rentBillFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        pettyBillFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        pettyBillFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pettyBillFormattedTF.setEnabled(false);
        pettyBillFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        electricityBillFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        electricityBillFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        electricityBillFormattedTF.setEnabled(false);
        electricityBillFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        waterBillFormattedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        waterBillFormattedTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        waterBillFormattedTF.setEnabled(false);
        waterBillFormattedTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout financialDetailsPanelLayout = new javax.swing.GroupLayout(financialDetailsPanel);
        financialDetailsPanel.setLayout(financialDetailsPanelLayout);
        financialDetailsPanelLayout.setHorizontalGroup(
            financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(financialDetailsPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(financialDetailsPanelLayout.createSequentialGroup()
                        .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statutoryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(rentCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rentBillFormattedTF)
                            .addComponent(statutoryBillFormattedTF, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)))
                    .addGroup(financialDetailsPanelLayout.createSequentialGroup()
                        .addComponent(pettyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applyExpenseJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pettyBillFormattedTF))))
                .addGap(18, 18, 18)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(electricityCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(waterCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelExpenseJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waterBillFormattedTF)
                    .addComponent(electricityBillFormattedTF, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        financialDetailsPanelLayout.setVerticalGroup(
            financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(financialDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(electricityCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(statutoryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statutoryBillFormattedTF)
                    .addComponent(electricityBillFormattedTF))
                .addGap(18, 18, 18)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rentCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waterCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(rentBillFormattedTF)
                    .addComponent(waterBillFormattedTF))
                .addGap(18, 18, 18)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pettyCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(pettyBillFormattedTF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(financialDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelExpenseJB, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(applyExpenseJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout settingsTabPanelLayout = new javax.swing.GroupLayout(settingsTabPanel);
        settingsTabPanel.setLayout(settingsTabPanelLayout);
        settingsTabPanelLayout.setHorizontalGroup(
            settingsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsTabPanelLayout.createSequentialGroup()
                        .addComponent(settingsInstructionL, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(settingsTabPanelLayout.createSequentialGroup()
                        .addComponent(companyDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(settingsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paymentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(financialDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        settingsTabPanelLayout.setVerticalGroup(
            settingsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsTabPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(settingsInstructionL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(companyDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(settingsTabPanelLayout.createSequentialGroup()
                        .addComponent(paymentDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(financialDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        adminTabbedPane.addTab("SETTINGS     ", null, settingsTabPanel, "click to modify settings");

        javax.swing.GroupLayout framePanelLayout = new javax.swing.GroupLayout(framePanel);
        framePanel.setLayout(framePanelLayout);
        framePanelLayout.setHorizontalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(footerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(framePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminTabbedPane)
                .addContainerGap())
        );
        framePanelLayout.setVerticalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framePanelLayout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(framePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1375, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(framePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void windowOpenedHandler(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpenedHandler
        // set window size to fullscreen when window is opened
        this.setExtendedState(this.MAXIMIZED_BOTH);
        // set enterprise title
        titleL.setText( PharmaDetails.getCompanyTitle() );
        // set enterprise motto/vision
        footerL.setText( PharmaDetails.getCompanyMotto() );
        
    }//GEN-LAST:event_windowOpenedHandler

    private void alphabeticKeyTypedHandler(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alphabeticKeyTypedHandler
        // get typed character
        char testChar = evt.getKeyChar();
        // if not alphabetic reject character        
        if(!(Character.isAlphabetic(testChar)))  {
            evt.consume();
        }        
    }//GEN-LAST:event_alphabeticKeyTypedHandler

    private void numericKeyTypedHandler(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numericKeyTypedHandler
        // get typed character
        char testChar = evt.getKeyChar();
        // if not numeric/digit reject character        
        if(!(Character.isDigit(testChar)))  {
            evt.consume();
        }
    }//GEN-LAST:event_numericKeyTypedHandler

    private void windowClosingHandler(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingHandler
        // close database connection then exit
        database.closeDB();
        System.exit(0);
    }//GEN-LAST:event_windowClosingHandler

    private void clearStockJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStockJBHandler
        // clear all fields inside Fill Stock borders
        drugNameTF.setText("");
        measurementFormattedTF.setText("");
        batchTF.setText("");
        expiryTF.setText("YYYY-MM-DD");
        quantityTF.setText("");
        buyPriceFormattedTF.setText("");
        sellPriceFormattedTF.setText("");
        
    }//GEN-LAST:event_clearStockJBHandler

    private void clearItemsJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearItemsJBHandler
        // clear all fields inside Add New Item borders
        drugNameTF2.setText("");
        measurementFormattedTF2.setText("");
        drugPrescriptionTF.setText("1 X 1");
        drugDescriptionTA.setText("");
        
    }//GEN-LAST:event_clearItemsJBHandler

    private void clearStaffJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStaffJBHandler
        // clear all fields inside Add New Staff borders
        fNameTF.setText("");
        mNameTF.setText("");
        lNameTF.setText("");
        staffIdTF.setText("");
        staffDobTF.setText("YYYY-MM-DD");
        staffPhoneTF.setText("");
        staffEmailTF.setText("");
        staffSalaryFormattedTF.setText("");
        staffPerksFormattedTF.setText("");        
        staffUsernameTF.setText("");        
        staffPasswordPF.setText("");        
        
    }//GEN-LAST:event_clearStaffJBHandler

    private void clearStaffDetailsJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStaffDetailsJBHandler
        // clear and disable all fields inside Update Staff Details borders
        updateStaffTF.setText("");
        updateUsernameTF.setText("");
        updatePasswordPF.setText("");
        updatePhoneTF.setText("");
        updateEmailTF.setText("");
        updateSalaryFormattedTF.setText("");
        updatePerksFormattedTF.setText("");
        
    }//GEN-LAST:event_clearStaffDetailsJBHandler

    private void updateStaffDetailsCheckBoxesHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_updateStaffDetailsCheckBoxesHandler
        // on click, enable the selected check boxes' text fields and buttons
        if(evt.getSource() == updateUsernameCheckBox) {
            if(updateUsernameCheckBox.isSelected()) {
                updateUsernameTF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updateUsernameTF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }           
        }
        
        if(evt.getSource() == updatePasswordCheckBox) {
            if(updatePasswordCheckBox.isSelected()) {
                updatePasswordPF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updatePasswordPF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == updatePhoneCheckBox) {
            if(updatePhoneCheckBox.isSelected()) {
                updatePhoneTF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updatePhoneTF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == updateEmailCheckBox) {
            if(updateEmailCheckBox.isSelected()) {
                updateEmailTF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updateEmailTF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == updateTitleCheckBox) {
            if(updateTitleCheckBox.isSelected()) {
                updateTitleCB.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updateTitleCB.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == updateSalaryCheckBox) {
            if(updateSalaryCheckBox.isSelected()) {
                updateSalaryFormattedTF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updateSalaryFormattedTF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == updatePerksCheckBox) {
            if(updatePerksCheckBox.isSelected()) {
                updatePerksFormattedTF.setEnabled(true);
                updateStaffJB.setEnabled(true);
            } else {
                updatePerksFormattedTF.setEnabled(false);
                updateStaffJB.setEnabled(false);
            }
        }
    }//GEN-LAST:event_updateStaffDetailsCheckBoxesHandler

    private void clearTerminateStaffJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTerminateStaffJBHandler
        // clear text field in Terminate Staff borders
        terminateStaffTF.setText("");
    }//GEN-LAST:event_clearTerminateStaffJBHandler

    private void cancelEnterpriseDetailsJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelEnterpriseDetailsJBHandler
        // clear all fields in Enterprise Details borders
        enterpriseNameTF.setText("");
        enterpriseMissionTF.setText("");
        enterprisePhoneTF.setText("");
        enterpriseEmailTF.setText("");
        enterpriseAddressTF.setText("");
        enterpriseLocationTF.setText("");
        enterpriseWebsiteTF.setText("");      
                
    }//GEN-LAST:event_cancelEnterpriseDetailsJBHandler

    private void enterpriseDetailsCheckBoxesHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_enterpriseDetailsCheckBoxesHandler
        // on click, enable the selected check boxes' text fields and buttons
        if(evt.getSource() == nameCheckBox) {
            if(nameCheckBox.isSelected()) {
                enterpriseNameTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseNameTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == missionCheckBox) {
            if(missionCheckBox.isSelected()) {
                enterpriseMissionTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseMissionTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == phoneCheckBox) {
            if(phoneCheckBox.isSelected()) {
                enterprisePhoneTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterprisePhoneTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == emailCheckBox) {
            if(emailCheckBox.isSelected()) {
                enterpriseEmailTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseEmailTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == addressCheckBox) {
            if(addressCheckBox.isSelected()) {
                enterpriseAddressTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseAddressTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == locationCheckBox) {
            if(locationCheckBox.isSelected()) {
                enterpriseLocationTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseLocationTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == websiteCheckBox) {
            if(websiteCheckBox.isSelected()) {
                enterpriseWebsiteTF.setEnabled(true);
                applyEnterpriseDetailsJB.setEnabled(true);
            } else {
                enterpriseWebsiteTF.setEnabled(false);
                applyEnterpriseDetailsJB.setEnabled(false);
            }
        }
        
    }//GEN-LAST:event_enterpriseDetailsCheckBoxesHandler

    private void cancelPayMethodJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPayMethodJBHandler
        // clear all fields in Payment Options Details borders
        servicePaymentTF.setText("eg. Mpesa");
        typePaymentTF.setText("eg. TILL NO");
        accountPaymentTF.setText("eg. 1023965");        
        bankPaymentTF.setText("");        
        accountBankPaymentTF.setText(""); 
        cardPaymentList.clearSelection();
                       
    }//GEN-LAST:event_cancelPayMethodJBHandler

    private void paymentOptionsCheckBoxesHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentOptionsCheckBoxesHandler
        // on click, enable the selected check boxes' text fields and buttons
        if(evt.getSource() == mobilePayCheckBox) {
            if(mobilePayCheckBox.isSelected()) {
                servicePaymentTF.setEnabled(true);
                typePaymentTF.setEnabled(true);
                accountPaymentTF.setEnabled(true);        
                applyPayMethodJB.setEnabled(true);
            } else {
                servicePaymentTF.setEnabled(false);
                typePaymentTF.setEnabled(false);
                accountPaymentTF.setEnabled(false);        
                applyPayMethodJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == bankPayCheckBox) {
            if(bankPayCheckBox.isSelected()) {
                bankPaymentTF.setEnabled(true);
                accountBankPaymentTF.setEnabled(true);
                applyPayMethodJB.setEnabled(true);                
            } else {
                bankPaymentTF.setEnabled(false);
                accountBankPaymentTF.setEnabled(false);
                applyPayMethodJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == cardPayCheckBox) {
            if(cardPayCheckBox.isSelected()) {
                cardPaymentList.setEnabled(true);
                applyPayMethodJB.setEnabled(true);
            } else {
                cardPaymentList.setEnabled(false);
                applyPayMethodJB.setEnabled(false);
            }
        }      
    }//GEN-LAST:event_paymentOptionsCheckBoxesHandler

    private void cancelExpenseJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelExpenseJBHandler
        // clear all fields in Recurrent Expenses Details borders
        statutoryBillFormattedTF.setText("");
        rentBillFormattedTF.setText("");
        pettyBillFormattedTF.setText("");        
        electricityBillFormattedTF.setText("");        
        waterBillFormattedTF.setText("");        
        
    }//GEN-LAST:event_cancelExpenseJBHandler

    private void recurrentExpensesCheckBoxesHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_recurrentExpensesCheckBoxesHandler
        // on click, enable the selected check boxes' text fields and buttons
        if(evt.getSource() == statutoryCheckBox) {
            if(statutoryCheckBox.isSelected()) {
                statutoryBillFormattedTF.setEnabled(true);
                applyExpenseJB.setEnabled(true);
            } else {
                statutoryBillFormattedTF.setEnabled(false);
                applyExpenseJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == rentCheckBox) {
            if(rentCheckBox.isSelected()) {
                rentBillFormattedTF.setEnabled(true);
                applyExpenseJB.setEnabled(true);
            } else {
                rentBillFormattedTF.setEnabled(false);
                applyExpenseJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == pettyCheckBox) {
            if(pettyCheckBox.isSelected()) {
                pettyBillFormattedTF.setEnabled(true);
                applyExpenseJB.setEnabled(true);
            } else {
                pettyBillFormattedTF.setEnabled(false);
                applyExpenseJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == electricityCheckBox) {
            if(electricityCheckBox.isSelected()) {
                electricityBillFormattedTF.setEnabled(true);
                applyExpenseJB.setEnabled(true);
            } else {
                electricityBillFormattedTF.setEnabled(false);
                applyExpenseJB.setEnabled(false);
            }
        }
        
        if(evt.getSource() == waterCheckBox) {
            if(waterCheckBox.isSelected()) {
                waterBillFormattedTF.setEnabled(true);
                applyExpenseJB.setEnabled(true);
            } else {
                waterBillFormattedTF.setEnabled(false);
                applyExpenseJB.setEnabled(false);
            }
        }
        
    }//GEN-LAST:event_recurrentExpensesCheckBoxesHandler

    private void addStockJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockJBHandler
        // if text fields not empty, confirm drug then add stock record
        if(drugNameTF.getText().isBlank() || measurementFormattedTF.getText().isBlank() || batchTF.getText().isBlank() ||
                expiryTF.getText().isBlank() || quantityTF.getText().isBlank() || buyPriceFormattedTF.getText().isBlank() ||
                        sellPriceFormattedTF.getText().isBlank()) {
            // display error message
            JOptionPane.showMessageDialog( null, "Please Fill All Fields!", "Fill Stock Error - MyPharma", JOptionPane.WARNING_MESSAGE );           
        } else {
            try {
                String measureValue = measurementFormattedTF.getValue().toString();
                String measure = measurementCB.getSelectedItem().toString();
                float buyPrice = Float.parseFloat(buyPriceFormattedTF.getValue().toString());
                float sellPrice = Float.parseFloat(sellPriceFormattedTF.getValue().toString());
                // validate input of quantity
                if(Integer.parseInt(quantityTF.getText()) <= 0 || Integer.parseInt(quantityTF.getText()) > 100) {
                     // display error message
                    JOptionPane.showMessageDialog( null, "Please input valid quantity from 1 - 100!", "Fill Stock Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                } 
                // validate input of expiry date
                else if(Authenticator.validateDate(expiryTF.getText()) == false || LocalDate.parse(expiryTF.getText()).isBefore(LocalDate.now())) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input valid Date!\neg.2022-05-03\nDate should be after today!", "Fill Stock Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                } 
                // record stock changes to database
                else {                
                    String drugMeasure = Authenticator.concatenate(measureValue, measure);
                    database.fillStock(drugNameTF.getText(), drugMeasure, batchTF.getText(), expiryTF.getText(), Integer.parseInt(quantityTF.getText()), buyPrice, sellPrice);                     
                }
            } catch(DateTimeParseException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input valid Date!", "Fill Stock Error - MyPharma", JOptionPane.ERROR_MESSAGE );
            }    
        } // end outer else
    }//GEN-LAST:event_addStockJBHandler

    private void addItemJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemJBHandler
        // confirm text fields not empty
        if(drugNameTF2.getText().isBlank() || measurementFormattedTF2.getText().isBlank() || drugPrescriptionTF.getText().isBlank() || drugDescriptionTA.getText().isBlank()) {
            // display error message
            JOptionPane.showMessageDialog( null, "Please Fill All Fields!", "Add New Item Error - MyPharma", JOptionPane.WARNING_MESSAGE ); 
        } else {
            String measureValue = measurementFormattedTF2.getValue().toString();
            String measure = measurementCB2.getSelectedItem().toString();
            String drugType = drugTypeCB.getSelectedItem().toString();
            // validate input of prescription
            if(Authenticator.validatePrescription(drugPrescriptionTF.getText()) == false) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input valid Prescription!\neg.1 X 1", "Add New Item Error - MyPharma", JOptionPane.WARNING_MESSAGE );
            } 
            // record new item to database
            else {
                String drugMeasure = Authenticator.concatenate(measureValue, measure);  
                database.addNewItem(drugNameTF2.getText(), drugType, drugMeasure, drugPrescriptionTF.getText(), drugDescriptionTA.getText());                
            }           
        } // end outer else
    }//GEN-LAST:event_addItemJBHandler

    private void submitStaffJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitStaffJBHandler
        // confirm text fields not empty
        if(fNameTF.getText().isBlank() || mNameTF.getText().isBlank() || lNameTF.getText().isBlank() || staffIdTF.getText().isBlank() || staffDobTF.getText().isBlank() || 
                staffPhoneTF.getText().isBlank() ||  staffEmailTF.getText().isBlank() || staffSalaryFormattedTF.getText().isBlank() || staffPerksFormattedTF.getText().isBlank() ||
                staffUsernameTF.getText().isBlank() || staffPasswordPF.getText().isBlank()) {
            // display error message
            JOptionPane.showMessageDialog( null, "Please Fill All Fields!", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
        } else {
            try {                
                String staffGender = staffGenderCB.getSelectedItem().toString();
                String staffTitle = staffTitleCB.getSelectedItem().toString();
                float salary = Float.parseFloat(staffSalaryFormattedTF.getValue().toString());
                float perks = Float.parseFloat(staffPerksFormattedTF.getValue().toString());
                // validate input id value
                if(Authenticator.validateID(staffIdTF.getText()) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid ID number!", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                }
                // validate date of birth input
                else if(Authenticator.validateDate(staffDobTF.getText()) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input valid Date!\neg.2022-05-03", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                }
                // validate mobile phone no. input
                else if(Authenticator.validateMobileNo(staffPhoneTF.getText()) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Mobile Phone number!", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                }
                // validate email address input
                else if(Authenticator.validateEmail(staffEmailTF.getText()) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Email address!", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                }
                // record new staff details to database
                else {
                    database.addStaff(staffUsernameTF.getText(), staffPasswordPF.getText(), Integer.parseInt(staffIdTF.getText()), fNameTF.getText(),
                        mNameTF.getText(), lNameTF.getText(), staffGender, staffDobTF.getText(), Integer.parseInt(staffPhoneTF.getText()), 
                        staffEmailTF.getText(), staffTitle, salary, perks);
                    
                }
                
            } catch(DateTimeParseException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input valid Date!", "Add New Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
            }     
        } // end outer else
    }//GEN-LAST:event_submitStaffJBHandler

    private void terminateStaffJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateStaffJBHandler
        // confirm field not blank
        if(terminateStaffTF.getText().isBlank()) {
            // display error message
            JOptionPane.showMessageDialog( null, "Please Fill Staff Id Field!", "Terminate Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
        } else {
            // validate staff id input value
            if(Authenticator.validateID(terminateStaffTF.getText()) == false) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid ID number!", "Terminate Staff Error - MyPharma", JOptionPane.WARNING_MESSAGE );
            }
            // terminate staff record
            else {
                database.terminateStaff(Integer.parseInt(terminateStaffTF.getText()));               
            }
        } // end outer else
    }//GEN-LAST:event_terminateStaffJBHandler

    private void updateStaffJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStaffJBHandler
        // confirm field not blank
        if(updateStaffTF.getText().isBlank()) {
            // display error message
            JOptionPane.showMessageDialog( null, "Please Fill Staff Id Field!", "Update Warning - MyPharma", JOptionPane.WARNING_MESSAGE );
        } else {
            // validate staff id input value
            if(Authenticator.validateID(updateStaffTF.getText()) == false) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid ID number!", "Update Warning - MyPharma", JOptionPane.WARNING_MESSAGE );
            } else {
                ResultSet rs = null; // to store data fetched from database
                
                try {
                    // confirm staff id if in database
                    database.fetchAStaff.setInt(1, Integer.parseInt(updateStaffTF.getText()));
                    rs = database.fetchAStaff.executeQuery();
                    // confirm if row returned from database
                    if(rs.next()) {
                        // employing do-while so as to ensure storage of results after rs.next() execute before pointer is incremented
                        do {
                            rs.getInt(2);                    
                        } while(rs.next());
                        /*** update username if not blank and enabled */
                        if(updateUsernameTF.isEnabled() && updateUsernameTF.getText().isBlank() == false) {
                            // record update to db
                            database.updateUsername(updateUsernameTF.getText(), Integer.parseInt(updateStaffTF.getText())); 
                            success = true;
                        } else {
                            updateUsernameTF.setEnabled(false);
                            success = false;
                        } // end update username
                        /*** update password if not blank and enabled */
                        if(updatePasswordPF.isEnabled() && updatePasswordPF.getText().isBlank() == false) {
                            // record update to db
                            database.updatePassword(updatePasswordPF.getText(), Integer.parseInt(updateStaffTF.getText()));
                            success = true;
                        } else {
                            updatePasswordPF.setEnabled(false);
                            success = false;
                        } // end update password
                        /*** update mobile phone */
                        if(updatePhoneTF.isEnabled() && updatePhoneTF.getText().isBlank() == false) {
                            // validate phone input value
                            if(Authenticator.validateMobileNo(updatePhoneTF.getText()) == false) {
                                // display error message
                                JOptionPane.showMessageDialog( null, "Please input a valid Mobile Phone number!", "Update Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                                success = false;
                            } else { 
                                // record update to db
                                database.updatePhone(Integer.parseInt(updatePhoneTF.getText()), Integer.parseInt(updateStaffTF.getText()));
                                success = true;
                            }
                        } else {
                            updatePhoneTF.setEnabled(false);
                            success = false;
                        } // end update mobile phone
                        /*** update email */
                        if(updateEmailTF.isEnabled() && updateEmailTF.getText().isBlank() == false) {
                            // validate email input value
                            if(Authenticator.validateEmail(updateEmailTF.getText()) == false) {
                                // display error message
                                JOptionPane.showMessageDialog( null, "Please input a valid Email address!", "Update Error - MyPharma", JOptionPane.WARNING_MESSAGE ); 
                                success = false;
                            } else {
                                // record update to db
                                database.updateEmail(updateEmailTF.getText(), Integer.parseInt(updateStaffTF.getText()));
                                success = true;
                            }    
                        } else {
                            updateEmailTF.setEnabled(false);
                            success = false;
                        } // end update email
                        /*** update title */
                        if(updateTitleCB.isEnabled()) {
                            // record update to db
                            database.updateTitle(updateTitleCB.getSelectedItem().toString(), Integer.parseInt(updateStaffTF.getText()));
                            success = true;
                        } else {
                            updateTitleCB.setEnabled(false);
                            success = false;
                        } // end update title
                        /*** update salary */
                        if(updateSalaryFormattedTF.isEnabled() && updateSalaryFormattedTF.getText().isBlank() == false) {
                            // record update to db 
                            float salary = Float.parseFloat(updateSalaryFormattedTF.getValue().toString());
                            database.updateSalary(salary, Integer.parseInt(updateStaffTF.getText()));
                            success = true;
                        } else {
                            updateSalaryFormattedTF.setEnabled(false);
                            success = false;
                        } // end update salary
                        /*** update perks */
                        if(updatePerksFormattedTF.isEnabled() && updatePerksFormattedTF.getText().isBlank() == false) {
                            // record update to db 
                            float perks = Float.parseFloat(updatePerksFormattedTF.getValue().toString());
                            database.updatePerks(perks, Integer.parseInt(updateStaffTF.getText()));
                            success = true;
                        } else {
                            updatePerksFormattedTF.setEnabled(false);
                            success = false;
                        } // end update perks
                        
                        // displaying of general success message 
                        if(success = true) {
                            JOptionPane.showMessageDialog( null, "Item(s) updated successfully!", "Update Success- MyPharma", JOptionPane.PLAIN_MESSAGE );
                        }    
                    } else {                
                        // displaying of error message 
                        JOptionPane.showMessageDialog( null, "Staff Details Not in record!", "Staff Error- MyPharma", JOptionPane.ERROR_MESSAGE );
                    } 
                } catch(SQLException e) {
                    // display connection error message
                    JOptionPane.showMessageDialog( null, e.getMessage(), "MyPharma- Database Error", JOptionPane.ERROR_MESSAGE );
                } // end catch                
            } // end else ie. before try           
        } // end outer else
    }//GEN-LAST:event_updateStaffJBHandler

    private void applyEnterpriseDetailsJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyEnterpriseDetailsJBHandler
        /*** update enterprise name */
        if(enterpriseNameTF.isEnabled() && enterpriseNameTF.getText().isBlank() == false) {
            // record update to db
            database.updateCompanyTitle(enterpriseNameTF.getText());
            success = true;
        } else {
            enterpriseNameTF.setEnabled(false);
            success = false;
        } // end update enterprise name
        /*** update motto/vision */
        if(enterpriseMissionTF.isEnabled() && enterpriseMissionTF.getText().isBlank() == false) {
            // record update to db
            database.updateCompanyMission(enterpriseMissionTF.getText());
            success = true;
        } else {
            enterpriseMissionTF.setEnabled(false);
            success = false;
        } // end update motto/vision
        /*** update enterprise mobile phone */
        if(enterprisePhoneTF.isEnabled() && enterprisePhoneTF.getText().isBlank() == false) {
            // validate phone input value
            if(Authenticator.validateMobileNo(enterprisePhoneTF.getText()) == false) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Mobile Phone number!", "Update Error - MyPharma", JOptionPane.WARNING_MESSAGE );
                success = false;
            } else { 
                // record update to db
                database.updateCompanyPhone(Integer.parseInt(enterprisePhoneTF.getText()));
                success = true;
            }
        } else {
            enterprisePhoneTF.setEnabled(false);
            success = false;
        } // end update mobile phone
        /*** update enterprise email */
        if(enterpriseEmailTF.isEnabled() && enterpriseEmailTF.getText().isBlank() == false) {
            // validate email input value
            if(Authenticator.validateEmail(enterpriseEmailTF.getText()) == false) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Email address!", "Update Error - MyPharma", JOptionPane.WARNING_MESSAGE ); 
                success = false;
            } else {
                // record update to db
                database.updateCompanyEmail(enterpriseEmailTF.getText());
                success = true;
            }    
        } else {
            enterpriseEmailTF.setEnabled(false);
            success = false;
        } // end update email
        /*** update enterprise address */
        if(enterpriseAddressTF.isEnabled() && enterpriseAddressTF.getText().isBlank() == false) {
            // record update to db
            database.updateCompanyAddress(enterpriseAddressTF.getText());
            success = true;
        } else {
            enterpriseAddressTF.setEnabled(false);
            success = false;
        } // end update address
        /*** update enterprise location */
        if(enterpriseLocationTF.isEnabled() && enterpriseLocationTF.getText().isBlank() == false) {
            // record update to db
            database.updateCompanyLocation(enterpriseLocationTF.getText());
            success = true;
        } else {
            enterpriseLocationTF.setEnabled(false);
            success = false;
        } // end update location
        /*** update enterprise website */
        if(enterpriseWebsiteTF.isEnabled() && enterpriseWebsiteTF.getText().isBlank() == false) {
            // record update to db
            database.updateCompanyWeb(enterpriseWebsiteTF.getText());
            success = true;
        } else {
            enterpriseWebsiteTF.setEnabled(false);
            success = false;
        } // end update websiste
        
        // displaying of general success message 
        if(success = true) {
            JOptionPane.showMessageDialog( null, "Item(s) updated successfully!\nChanges will reflect when you next load window.",
                    "Update Success- MyPharma", JOptionPane.PLAIN_MESSAGE );
        }
    }//GEN-LAST:event_applyEnterpriseDetailsJBHandler

    private void applyExpenseJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyExpenseJBHandler
        /*** update statutory bill */
        if(statutoryBillFormattedTF.isEnabled() && statutoryBillFormattedTF.getText().isBlank() == false) {
            // record update to db 
            float statutoryFees = Float.parseFloat(statutoryBillFormattedTF.getValue().toString());
            database.updateStatutoryFees(statutoryFees);
            success = true;
        } else {
            statutoryBillFormattedTF.setEnabled(false);
            success = false;
        } // end update statutory bill
        /*** update rent bill */
        if(rentBillFormattedTF.isEnabled() && rentBillFormattedTF.getText().isBlank() == false) {
            // record update to db 
            float rentBill = Float.parseFloat(rentBillFormattedTF.getValue().toString());
            database.updateRentBill(rentBill);
            success = true;
        } else {
            rentBillFormattedTF.setEnabled(false);
            success = false;
        } // end update rent bill
        /*** update petty bill */
        if(pettyBillFormattedTF.isEnabled() && pettyBillFormattedTF.getText().isBlank() == false) {
            // record update to db 
            float pettyBill = Float.parseFloat(pettyBillFormattedTF.getValue().toString());
            database.updatePettyBill(pettyBill);
            success = true;
        } else {
            pettyBillFormattedTF.setEnabled(false);
            success = false;
        } // end update petty bill
        /*** update electricity bill */
        if(electricityBillFormattedTF.isEnabled() && electricityBillFormattedTF.getText().isBlank() == false) {
            // record update to db 
            float electricityBill = Float.parseFloat(electricityBillFormattedTF.getValue().toString());
            database.updateElectricityBill(electricityBill);
            success = true;
        } else {
            electricityBillFormattedTF.setEnabled(false);
            success = false;
        } // end update electricity bill
        /*** update water bill */
        if(waterBillFormattedTF.isEnabled() && waterBillFormattedTF.getText().isBlank() == false) {
            // record update to db 
            float waterBill = Float.parseFloat(waterBillFormattedTF.getValue().toString());
            database.updateWaterBill(waterBill);
            success = true;
        } else {
            waterBillFormattedTF.setEnabled(false);
            success = false;
        } // end update water bill
        
        // displaying of general success message 
        if(success = true) {
            JOptionPane.showMessageDialog( null, "Item(s) updated successfully!", "Update Success- MyPharma", JOptionPane.PLAIN_MESSAGE );
        }        
    }//GEN-LAST:event_applyExpenseJBHandler

    private void applyPayMethodJBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPayMethodJBHandler
        /*** update enterprise mobile payment method */
        if(servicePaymentTF.isEnabled() && servicePaymentTF.getText().isBlank() == false && typePaymentTF.getText().isBlank() == false && accountPaymentTF.getText().isBlank() == false ) {
            String mobileMethod = String.format("%s %s %s", servicePaymentTF.getText().toUpperCase(), typePaymentTF.getText().toUpperCase(), accountPaymentTF.getText());
            // record update to db
            database.updateMobilePay(mobileMethod);
        } else {
            servicePaymentTF.setEnabled(false);
            typePaymentTF.setEnabled(false);
            accountPaymentTF.setEnabled(false);
        } // end update mobile payment 
        /*** update enterprise bank payment method */
        if(bankPaymentTF.isEnabled() && bankPaymentTF.getText().isBlank() == false && accountBankPaymentTF.getText().isBlank() == false ) {
            String bankMethod = String.format("%s %s", bankPaymentTF.getText().toUpperCase(), accountBankPaymentTF.getText());
            // record update to db
            database.updateBankPay(bankMethod);
        } else {
            bankPaymentTF.setEnabled(false);
            accountBankPaymentTF.setEnabled(false);
        } // end update bank payment
        /*** update enterprise card payment method */
        if(cardPaymentList.isEnabled() && cardPaymentList.isSelectionEmpty() == false) {
            // record update to db
            database.updateCardPay(cardPaymentList.getSelectedValuesList().toString());
        } else {
            cardPaymentList.setEnabled(false);
        } // end update card payment
        // displaying of general success message 
        JOptionPane.showMessageDialog( null, "Item(s) updated successfully!", "Update Success- MyPharma", JOptionPane.PLAIN_MESSAGE );
        
    }//GEN-LAST:event_applyPayMethodJBHandler

    private void salesDetailsMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesDetailsMenuItemHandler
        // check if Today clicked in sales details menu
        if( evt.getSource() == salesTodayMenuItem ) {
            try {
                pharmaDetails.generateSalesDetailsReport(database.fetchSalesDay.executeQuery(), "TODAY'S SALES REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Week clicked in sales details menu
        if( evt.getSource() == salesWeekMenuItem ) {
            try {
                pharmaDetails.generateSalesDetailsReport(database.fetchSalesWeek.executeQuery(), "SALES REPORT FOR THIS WEEK", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Month clicked in sales details menu
        if( evt.getSource() == salesMonthMenuItem ) {
            try {
                pharmaDetails.generateSalesDetailsReport(database.fetchSalesMonth.executeQuery(), "SALES REPORT FOR THIS MONTH", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Year clicked in sales details menu
        if( evt.getSource() == salesYearMenuItem ) {
            try {
                pharmaDetails.generateSalesDetailsReport(database.fetchSalesYear.executeQuery(), "SALES REPORT FOR THIS YEAR", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Date clicked in sales details menu
        if( evt.getSource() == salesDateMenuItem ) {
            try {
                // get search date value from user
                String dateInput = JOptionPane.showInputDialog(null, "Input the search date. Format: YYYY-MM-DD\neg. 2022-05-05", "MyPHARMA- Input the search date", JOptionPane.QUESTION_MESSAGE);
                // validate the input date
                if(dateInput == null) {
                    // do nothing
                } else if(Authenticator.validateDate(dateInput) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Date!\neg.2022-05-03", "MyPharma- Search Sale", JOptionPane.WARNING_MESSAGE );
                } else {
                    pharmaDetails.generateSalesDetailsReport(database.fetchSalesDay.executeQuery(), "SALES REPORT FOR THE DATE " + dateInput, reportsTextPane, dateInput, true);       
                }    
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            } catch(DateTimeParseException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Date!", "MyPharma- Search Sale", JOptionPane.WARNING_MESSAGE );
            }
        }      
    }//GEN-LAST:event_salesDetailsMenuItemHandler

    private void itemsExpiringMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemsExpiringMenuItemHandler
        // check if Today clicked in expiring items menu
        if( evt.getSource() == expiringTodayMenuItem ) {
            try {
                pharmaDetails.generateExpiringDetailsReport(database.fetchExpiringDay.executeQuery(), "ITEMS EXPIRING TODAY REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Week clicked in expiring items menu
        if( evt.getSource() == expiringWeekMenuItem ) {
            try {
                pharmaDetails.generateExpiringDetailsReport(database.fetchExpiringWeek.executeQuery(), "ITEMS EXPIRING THIS WEEK REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Month clicked in expiring items menu
        if( evt.getSource() == expiringMonthMenuItem ) {
            try {
                pharmaDetails.generateExpiringDetailsReport(database.fetchExpiringMonth.executeQuery(), "ITEMS EXPIRING THIS MONTH REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Year clicked in expiring items menu
        if( evt.getSource() == expiringYearMenuItem ) {
            try {
                pharmaDetails.generateExpiringDetailsReport(database.fetchExpiringYear.executeQuery(), "ITEMS EXPIRING THIS YEAR REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Date clicked in expiring items menu
        if( evt.getSource() == expiringDateMenuItem ) {
            try {
                // get search date value from user
                String dateInput = JOptionPane.showInputDialog(null, "Input the search date. Format: YYYY-MM-DD\neg. 2022-05-05", "MyPHARMA- Input the search date", JOptionPane.QUESTION_MESSAGE);
                // validate the input date
                if(dateInput == null) {
                    // do nothing
                } else if(Authenticator.validateDate(dateInput) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Date!\neg.2022-05-03", "MyPharma- Search Expiring", JOptionPane.WARNING_MESSAGE );
                } else {
                    pharmaDetails.generateExpiringDetailsReport(database.fetchExpiringDay.executeQuery(), "ITEMS EXPIRING ON THE DATE " + dateInput, reportsTextPane, dateInput, true);       
                }    
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            } catch(DateTimeParseException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Date!", "MyPharma- Search Expiring", JOptionPane.WARNING_MESSAGE );
            }
        } 
    }//GEN-LAST:event_itemsExpiringMenuItemHandler

    private void availableItemsMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableItemsMenuItemHandler
        // check if available items clicked
        if( evt.getSource() == availableMenuItem ) {
            reportsTextPane.setText("");
            pharmaDetails.generateAvailableItemsReport(reportsTextPane);
        }
    }//GEN-LAST:event_availableItemsMenuItemHandler

    private void customerDetailsMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerDetailsMenuItemHandler
        // check if Today clicked in customer details menu
        if( evt.getSource() == customerTodayMenuItem ) {
            try {
                pharmaDetails.generateCustomerDetailsReport(database.fetchCustomersDay.executeQuery(), "SERVED CUSTOMERS TODAY REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Week clicked in customer details menu
        if( evt.getSource() == customerWeekMenuItem ) {
            try {
                pharmaDetails.generateCustomerDetailsReport(database.fetchCustomersWeek.executeQuery(), "SERVED CUSTOMERS THIS WEEK REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Month clicked in customer details menu
        if( evt.getSource() == customerMonthMenuItem ) {
            try {
                pharmaDetails.generateCustomerDetailsReport(database.fetchCustomersMonth.executeQuery(), "SERVED CUSTOMERS THIS MONTH REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Year clicked in customer details menu
        if( evt.getSource() == customerYearMenuItem ) {
            try {
                pharmaDetails.generateCustomerDetailsReport(database.fetchCustomersYear.executeQuery(), "SERVED CUSTOMERS THIS YEAR REPORT", reportsTextPane, "null", false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if Date clicked in customer details menu
        if( evt.getSource() == customerDateMenuItem ) {
            try {
                // get search date value from user
                String dateInput = JOptionPane.showInputDialog(null, "Input the search date. Format: YYYY-MM-DD\neg. 2022-05-05", "MyPHARMA- Input the search date", JOptionPane.QUESTION_MESSAGE);
                // validate the input date
                if(dateInput == null) {
                    // do nothing
                } else if(Authenticator.validateDate(dateInput) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid Date!\neg.2022-05-03", "MyPharma- Search Customers", JOptionPane.WARNING_MESSAGE );
                } else {
                    pharmaDetails.generateCustomerDetailsReport(database.fetchCustomersDay.executeQuery(), "SERVED CUSTOMERS ON THE DATE " + dateInput, reportsTextPane, dateInput, true);       
                }    
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            } catch(DateTimeParseException e) {
                // display error message
                JOptionPane.showMessageDialog( null, "Please input a valid Date!", "MyPharma- Search Customers", JOptionPane.WARNING_MESSAGE );
            }
        } 
    }//GEN-LAST:event_customerDetailsMenuItemHandler

    private void staffMenuItemHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffMenuItemHandler
        // check if all staff details menu clicked
        if( evt.getSource() == allStaffMenuItem ) {
            try {
                pharmaDetails.generateStaffDetailsReport(database.fetchStaff.executeQuery(), "ALL STFF DETAILS REPORT", reportsTextPane, 0, false);       
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
        // check if specific staff details menu clicked
        if( evt.getSource() == specificStaffMenuItem ) {
            try {
                // get search date value from user
                String idInput = JOptionPane.showInputDialog(null, "Input the search National ID.", "MyPHARMA- Input the search ID", JOptionPane.QUESTION_MESSAGE);
                // validate the input date
                if(idInput == null) {
                    // do nothing
                } else if(Authenticator.validateID(idInput) == false) {
                    // display error message
                    JOptionPane.showMessageDialog( null, "Please input a valid National ID!", "MyPharma- Search Staff", JOptionPane.WARNING_MESSAGE );
                } else {
                    pharmaDetails.generateStaffDetailsReport(database.fetchStaff.executeQuery(), "STAFF DETAILS REPORT WITH ID: " + Integer.parseInt(idInput), reportsTextPane, Integer.parseInt(idInput), true);       
                }    
            } catch( SQLException exception ) {
                // displaying of connection error message 
                JOptionPane.showMessageDialog( null, exception.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
            }
        }
    }//GEN-LAST:event_staffMenuItemHandler

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountBankPaymentL;
    private javax.swing.JTextField accountBankPaymentTF;
    private javax.swing.JLabel accountPaymentL;
    private javax.swing.JTextField accountPaymentTF;
    private javax.swing.JButton addItemJB;
    private javax.swing.JPanel addItemPanel;
    private javax.swing.JPanel addItemTabPanel;
    private javax.swing.JPanel addStaffPanel;
    private javax.swing.JButton addStockJB;
    private javax.swing.JCheckBox addressCheckBox;
    private javax.swing.JTabbedPane adminTabbedPane;
    private javax.swing.JMenuItem allStaffMenuItem;
    private javax.swing.JButton applyEnterpriseDetailsJB;
    private javax.swing.JButton applyExpenseJB;
    private javax.swing.JButton applyPayMethodJB;
    private javax.swing.JMenu availableJMenu;
    private javax.swing.JMenuItem availableMenuItem;
    private javax.swing.JCheckBox bankPayCheckBox;
    private javax.swing.JLabel bankPaymentL;
    private javax.swing.JTextField bankPaymentTF;
    private javax.swing.JLabel batchL;
    private javax.swing.JTextField batchTF;
    private javax.swing.JFormattedTextField buyPriceFormattedTF;
    private javax.swing.JLabel buyPriceL;
    private javax.swing.JButton cancelEnterpriseDetailsJB;
    private javax.swing.JButton cancelExpenseJB;
    private javax.swing.JButton cancelPayMethodJB;
    private javax.swing.JCheckBox cardPayCheckBox;
    private javax.swing.JList<String> cardPaymentList;
    private javax.swing.JButton clearItemsJB;
    private javax.swing.JButton clearStaffDetailsJB;
    private javax.swing.JButton clearStaffJB;
    private javax.swing.JButton clearStockJB;
    private javax.swing.JButton clearTerminateStaffJB;
    private javax.swing.JPanel companyDetailsPanel;
    private javax.swing.JMenuItem customerDateMenuItem;
    private javax.swing.JMenu customerJMenu;
    private javax.swing.JMenuItem customerMonthMenuItem;
    private javax.swing.JMenuItem customerTodayMenuItem;
    private javax.swing.JMenuItem customerWeekMenuItem;
    private javax.swing.JMenuItem customerYearMenuItem;
    private javax.swing.JTextArea drugDescriptionTA;
    private javax.swing.JLabel drugNameL;
    private javax.swing.JLabel drugNameL2;
    private javax.swing.JTextField drugNameTF;
    private javax.swing.JTextField drugNameTF2;
    private javax.swing.JLabel drugPrescriptionL;
    private javax.swing.JTextField drugPrescriptionTF;
    private javax.swing.JComboBox<String> drugTypeCB;
    private javax.swing.JLabel drugTypeL;
    private javax.swing.JFormattedTextField electricityBillFormattedTF;
    private javax.swing.JCheckBox electricityCheckBox;
    private javax.swing.JCheckBox emailCheckBox;
    private javax.swing.JTextField enterpriseAddressTF;
    private javax.swing.JTextField enterpriseEmailTF;
    private javax.swing.JTextField enterpriseLocationTF;
    private javax.swing.JTextField enterpriseMissionTF;
    private javax.swing.JTextField enterpriseNameTF;
    private javax.swing.JTextField enterprisePhoneTF;
    private javax.swing.JTextField enterpriseWebsiteTF;
    private javax.swing.JMenuItem expiringDateMenuItem;
    private javax.swing.JMenu expiringJMenu;
    private javax.swing.JMenuItem expiringMonthMenuItem;
    private javax.swing.JMenuItem expiringTodayMenuItem;
    private javax.swing.JMenuItem expiringWeekMenuItem;
    private javax.swing.JMenuItem expiringYearMenuItem;
    private javax.swing.JLabel expiryL;
    private javax.swing.JTextField expiryTF;
    private javax.swing.JLabel fNameL;
    private javax.swing.JTextField fNameTF;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPanel fillStockPanel;
    private javax.swing.JPanel financialDetailsPanel;
    private javax.swing.JLabel footerL;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JPanel framePanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel instructionL1;
    private javax.swing.JLabel instructionL2;
    private javax.swing.JLabel instructionL3;
    private javax.swing.JLabel instructionL4;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu18;
    private javax.swing.JMenu jMenu19;
    private javax.swing.JMenu jMenu20;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lNameL;
    private javax.swing.JTextField lNameTF;
    private javax.swing.JCheckBox locationCheckBox;
    private javax.swing.JLabel mNameL;
    private javax.swing.JTextField mNameTF;
    private javax.swing.JPanel manageStaffTabPanel;
    private javax.swing.JComboBox<String> measurementCB;
    private javax.swing.JComboBox<String> measurementCB2;
    private javax.swing.JFormattedTextField measurementFormattedTF;
    private javax.swing.JFormattedTextField measurementFormattedTF2;
    private javax.swing.JLabel measurementL;
    private javax.swing.JLabel measurementL2;
    private javax.swing.JCheckBox missionCheckBox;
    private javax.swing.JCheckBox mobilePayCheckBox;
    private javax.swing.JCheckBox nameCheckBox;
    private javax.swing.JPanel paymentDetailsPanel;
    private javax.swing.JFormattedTextField pettyBillFormattedTF;
    private javax.swing.JCheckBox pettyCheckBox;
    private javax.swing.JCheckBox phoneCheckBox;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JLabel quantityL;
    private javax.swing.JTextField quantityTF;
    private javax.swing.JFormattedTextField rentBillFormattedTF;
    private javax.swing.JCheckBox rentCheckBox;
    private javax.swing.JInternalFrame reportsJInternalFrame;
    private javax.swing.JMenuBar reportsMenuBar;
    private javax.swing.JPanel reportsPanel;
    private javax.swing.JPanel reportsTabPanel;
    private javax.swing.JTextPane reportsTextPane;
    private javax.swing.JMenuItem salesDateMenuItem;
    private javax.swing.JMenu salesJMenu;
    private javax.swing.JMenuItem salesMonthMenuItem;
    private javax.swing.JMenuItem salesTodayMenuItem;
    private javax.swing.JMenuItem salesWeekMenuItem;
    private javax.swing.JMenuItem salesYearMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JFormattedTextField sellPriceFormattedTF;
    private javax.swing.JLabel sellPriceL;
    private javax.swing.JLabel servicePaymentL;
    private javax.swing.JTextField servicePaymentTF;
    private javax.swing.JLabel settingsInstructionL;
    private javax.swing.JPanel settingsTabPanel;
    private javax.swing.JMenuItem specificStaffMenuItem;
    private javax.swing.JLabel staffDobL;
    private javax.swing.JTextField staffDobTF;
    private javax.swing.JLabel staffEmailL;
    private javax.swing.JTextField staffEmailTF;
    private javax.swing.JComboBox<String> staffGenderCB;
    private javax.swing.JLabel staffGenderL;
    private javax.swing.JLabel staffIdL;
    private javax.swing.JTextField staffIdTF;
    private javax.swing.JMenu staffJMenu;
    private javax.swing.JLabel staffNameL;
    private javax.swing.JLabel staffPasswordL;
    private javax.swing.JPasswordField staffPasswordPF;
    private javax.swing.JFormattedTextField staffPerksFormattedTF;
    private javax.swing.JLabel staffPerksL;
    private javax.swing.JLabel staffPhoneL;
    private javax.swing.JTextField staffPhoneTF;
    private javax.swing.JFormattedTextField staffSalaryFormattedTF;
    private javax.swing.JLabel staffSalaryL;
    private javax.swing.JComboBox<String> staffTitleCB;
    private javax.swing.JLabel staffTitleL;
    private javax.swing.JLabel staffUsernameL;
    private javax.swing.JTextField staffUsernameTF;
    private javax.swing.JFormattedTextField statutoryBillFormattedTF;
    private javax.swing.JCheckBox statutoryCheckBox;
    private javax.swing.JButton submitStaffJB;
    private javax.swing.JLabel terminateInstructionL;
    private javax.swing.JButton terminateStaffJB;
    private javax.swing.JLabel terminateStaffL;
    private javax.swing.JPanel terminateStaffPanel;
    private javax.swing.JTextField terminateStaffTF;
    private javax.swing.JLabel titleL;
    private javax.swing.JLabel typePaymentL;
    private javax.swing.JTextField typePaymentTF;
    private javax.swing.JCheckBox updateEmailCheckBox;
    private javax.swing.JTextField updateEmailTF;
    private javax.swing.JCheckBox updatePasswordCheckBox;
    private javax.swing.JPasswordField updatePasswordPF;
    private javax.swing.JCheckBox updatePerksCheckBox;
    private javax.swing.JFormattedTextField updatePerksFormattedTF;
    private javax.swing.JCheckBox updatePhoneCheckBox;
    private javax.swing.JTextField updatePhoneTF;
    private javax.swing.JCheckBox updateSalaryCheckBox;
    private javax.swing.JFormattedTextField updateSalaryFormattedTF;
    private javax.swing.JButton updateStaffJB;
    private javax.swing.JLabel updateStaffL;
    private javax.swing.JPanel updateStaffPanel;
    private javax.swing.JTextField updateStaffTF;
    private javax.swing.JComboBox<String> updateTitleCB;
    private javax.swing.JCheckBox updateTitleCheckBox;
    private javax.swing.JCheckBox updateUsernameCheckBox;
    private javax.swing.JTextField updateUsernameTF;
    private javax.swing.JFormattedTextField waterBillFormattedTF;
    private javax.swing.JCheckBox waterCheckBox;
    private javax.swing.JCheckBox websiteCheckBox;
    // End of variables declaration//GEN-END:variables
}
